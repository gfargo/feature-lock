{
  "name": "age-gate",
  "type": "registry:ui",
  "dependencies": [
    "react@^19.0.0",
    "lucide-react@^0.454.0",
    "class-variance-authority@^0.7.1",
    "clsx@^2.1.1",
    "tailwind-merge@^3.3.1",
    "@radix-ui/react-dialog@1.1.4"
  ],
  "registryDependencies": [
    "button",
    "dialog",
    "input",
    "label"
  ],
  "files": [
    {
      "type": "registry:lib",
      "path": "components/ageGate/age-gate.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nimport {\n    Dialog,\n    DialogContent,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogTitle,\n} from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { AlertCircle, Loader2, Shield } from \"lucide-react\"\nimport type { LucideIcon } from \"lucide-react\"\n\nexport type AgeVerificationMethod = \"birthdate\" | \"simple\" | \"custom\"\n\nexport type AgeGateLabels = {\n  title: string\n  description: string\n  confirm: string\n  pending: string\n  cancel: string\n  error: string\n  birthdateLabel: string\n  birthdatePlaceholder: string\n  simpleConfirm: string\n  simpleCancel: string\n  rememberChoice: string\n}\n\nexport type CustomVerificationRenderArgs = {\n  isPending: boolean\n  error: unknown | null\n  onVerify: (verified: boolean) => void\n  resetError: () => void\n  registerErrorRef: (el: HTMLElement | null) => void\n  focusError: () => void\n}\n\nexport type StorageType = \"localStorage\" | \"sessionStorage\" | \"cookie\"\n\nexport type CookieOptions = {\n  domain?: string\n  path?: string\n  secure?: boolean\n  sameSite?: \"strict\" | \"lax\" | \"none\"\n  maxAge?: number // in seconds\n  expires?: Date\n}\n\nexport type AgeGateProps = {\n  // Core behavior\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n  minimumAge?: number\n  method?: AgeVerificationMethod\n  \n  // Persistence\n  rememberVerification?: boolean\n  storageKey?: string\n  storageType?: StorageType\n  cookieOptions?: CookieOptions\n  \n  // Callbacks\n  onVerified?: (age?: number) => Promise<void> | void\n  onDenied?: () => Promise<void> | void\n  onError?: (error: unknown) => void\n  \n  // Custom verification\n  customVerification?: (args: CustomVerificationRenderArgs) => React.ReactNode\n  \n  // Custom content\n  children?: React.ReactNode\n  \n  // Styling\n  className?: string\n  icon?: LucideIcon\n  \n  // Labels\n  labels?: Partial<AgeGateLabels>\n  \n  // Behavior\n  allowCancel?: boolean\n  autoCloseOnVerify?: boolean\n  resetErrorOnOpenChange?: boolean\n  focusErrorOnSet?: boolean\n  \n  // A11y\n  announcePending?: boolean\n  \n  // Testing\n  testId?: string\n}\n\nconst defaultLabels: AgeGateLabels = {\n  title: \"Age Verification Required\",\n  description: \"Please verify your age to continue.\",\n  confirm: \"Verify Age\",\n  pending: \"Verifying...\",\n  cancel: \"Cancel\",\n  error: \"Age verification failed. Please check your information and try again.\",\n  birthdateLabel: \"Date of Birth\",\n  birthdatePlaceholder: \"MM/DD/YYYY\",\n  simpleConfirm: \"I am 18 or older\",\n  simpleCancel: \"I am under 18\",\n  rememberChoice: \"Remember my choice\",\n}\n\nfunction calculateAge(birthDate: Date): number {\n  const today = new Date()\n  let age = today.getFullYear() - birthDate.getFullYear()\n  const monthDiff = today.getMonth() - birthDate.getMonth()\n  \n  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n    age--\n  }\n  \n  return age\n}\n\nfunction isValidDate(dateString: string): boolean {\n  const date = new Date(dateString)\n  return date instanceof Date && !isNaN(date.getTime())\n}\n\nfunction getCookie(name: string): string | null {\n  if (typeof document === \"undefined\") return null\n  \n  const value = `; ${document.cookie}`\n  const parts = value.split(`; ${name}=`)\n  if (parts.length === 2) {\n    const cookieValue = parts.pop()?.split(';').shift()\n    return cookieValue || null\n  }\n  return null\n}\n\nfunction setCookie(name: string, value: string, options: CookieOptions = {}): void {\n  if (typeof document === \"undefined\") return\n  \n  let cookieString = `${name}=${value}`\n  \n  if (options.maxAge !== undefined) {\n    cookieString += `; Max-Age=${options.maxAge}`\n  }\n  \n  if (options.expires) {\n    cookieString += `; Expires=${options.expires.toUTCString()}`\n  }\n  \n  if (options.domain) {\n    cookieString += `; Domain=${options.domain}`\n  }\n  \n  if (options.path) {\n    cookieString += `; Path=${options.path}`\n  } else {\n    cookieString += `; Path=/`\n  }\n  \n  if (options.secure) {\n    cookieString += `; Secure`\n  }\n  \n  if (options.sameSite) {\n    cookieString += `; SameSite=${options.sameSite}`\n  }\n  \n  document.cookie = cookieString\n}\n\nfunction getStoredVerification(storageKey: string, storageType: StorageType): boolean | null {\n  if (typeof window === \"undefined\") return null\n  \n  try {\n    if (storageType === \"cookie\") {\n      const cookieValue = getCookie(storageKey)\n      return cookieValue ? JSON.parse(cookieValue) : null\n    }\n    \n    const storage = storageType === \"sessionStorage\" ? sessionStorage : localStorage\n    const stored = storage.getItem(storageKey)\n    return stored ? JSON.parse(stored) : null\n  } catch {\n    return null\n  }\n}\n\nfunction setStoredVerification(\n  storageKey: string, \n  verified: boolean, \n  storageType: StorageType,\n  cookieOptions?: CookieOptions\n): void {\n  if (typeof window === \"undefined\") return\n  \n  try {\n    if (storageType === \"cookie\") {\n      const defaultCookieOptions: CookieOptions = {\n        maxAge: 60 * 60 * 24 * 365, // 1 year\n        path: \"/\",\n        sameSite: \"lax\",\n        ...cookieOptions\n      }\n      setCookie(storageKey, JSON.stringify(verified), defaultCookieOptions)\n      return\n    }\n    \n    const storage = storageType === \"sessionStorage\" ? sessionStorage : localStorage\n    storage.setItem(storageKey, JSON.stringify(verified))\n  } catch {\n    // Silently fail if storage is not available\n  }\n}\n\nconst AgeGate = React.forwardRef<HTMLDivElement, AgeGateProps>(function AgeGate(\n  {\n    open,\n    onOpenChange,\n    minimumAge = 18,\n    method = \"simple\",\n    \n    rememberVerification = false,\n    storageKey = \"age-gate-verified\",\n    storageType = \"localStorage\",\n    cookieOptions,\n    \n    onVerified,\n    onDenied,\n    onError,\n    \n    customVerification,\n    children,\n    \n    className,\n    icon,\n    \n    labels,\n    \n    allowCancel = true,\n    autoCloseOnVerify = true,\n    resetErrorOnOpenChange = true,\n    focusErrorOnSet = true,\n    \n    announcePending = true,\n    \n    testId,\n  },\n  ref,\n) {\n  const normalizedLabels: AgeGateLabels = { ...defaultLabels, ...labels }\n  \n  // Internal state\n  const [internalOpen, setInternalOpen] = React.useState(false)\n  const [birthdate, setBirthdate] = React.useState(\"\")\n  const [rememberChoice, setRememberChoice] = React.useState(false)\n  const [error, setError] = React.useState<unknown | null>(null)\n  \n  // Controlled vs uncontrolled\n  const controlled = open !== undefined\n  const effectiveOpen = controlled ? open : internalOpen\n  \n  // Check stored verification on mount\n  React.useEffect(() => {\n    if (!rememberVerification) return\n    \n    const stored = getStoredVerification(storageKey, storageType)\n    if (stored === true) {\n      // Already verified, don't show dialog\n      if (!controlled) setInternalOpen(false)\n      return\n    }\n    \n    // Not verified or no stored value, show dialog if not controlled\n    if (!controlled && stored === null) {\n      setInternalOpen(true)\n    }\n  }, [rememberVerification, storageKey, storageType, controlled])\n  \n  // Async operations using useTransition\n  const [isPending, startTransition] = React.useTransition()\n  \n  // Error management\n  const resetError = React.useCallback(() => setError(null), [])\n  \n  // Reset error on open changes if configured\n  React.useEffect(() => {\n    if (!resetErrorOnOpenChange) return\n    resetError()\n  }, [effectiveOpen, resetErrorOnOpenChange, resetError])\n  \n  // SR pending live region id\n  const statusId = React.useId()\n  \n  // Error focusing refs\n  const internalErrorRef = React.useRef<HTMLDivElement | null>(null)\n  const externalErrorRef = React.useRef<HTMLElement | null>(null)\n  const registerErrorRef = (el: HTMLElement | null) => {\n    externalErrorRef.current = el ?? null\n  }\n  const focusError = () => {\n    const target = externalErrorRef.current ?? internalErrorRef.current\n    if (target) {\n      setTimeout(() => {\n        target.focus({ preventScroll: false })\n      }, 0)\n    }\n  }\n  \n  const handleOpenChange = (nextOpen: boolean) => {\n    if (!controlled) setInternalOpen(nextOpen)\n    onOpenChange?.(nextOpen)\n  }\n  \n  const handleVerification = (verified: boolean, age?: number) => {\n    resetError()\n    startTransition(() => {\n      Promise.resolve().then(async () => {\n        try {\n          if (verified) {\n            // Store verification if remember is enabled\n            if (rememberVerification && rememberChoice) {\n              setStoredVerification(storageKey, true, storageType, cookieOptions)\n            }\n            \n            await Promise.resolve(onVerified?.(age))\n            \n            if (autoCloseOnVerify) {\n              handleOpenChange(false)\n            }\n          } else {\n            await Promise.resolve(onDenied?.())\n            \n            if (autoCloseOnVerify) {\n              handleOpenChange(false)\n            }\n          }\n        } catch (e) {\n          setError(e)\n          onError?.(e)\n          if (focusErrorOnSet) focusError()\n        }\n      })\n    })\n  }\n  \n  const handleBirthdateVerification = () => {\n    if (!birthdate.trim()) {\n      setError(new Error(\"Please enter your date of birth\"))\n      if (focusErrorOnSet) focusError()\n      return\n    }\n    \n    if (!isValidDate(birthdate)) {\n      setError(new Error(\"Please enter a valid date\"))\n      if (focusErrorOnSet) focusError()\n      return\n    }\n    \n    const birthDate = new Date(birthdate)\n    const age = calculateAge(birthDate)\n    const verified = age >= minimumAge\n    \n    handleVerification(verified, age)\n  }\n  \n  const handleSimpleVerification = (verified: boolean) => {\n    handleVerification(verified)\n  }\n  \n  const IconComponent = icon || Shield\n  \n  // Pending announcement for SR\n  const PendingStatus = () =>\n    announcePending ? (\n      <div id={statusId} role=\"status\" aria-live=\"polite\" className=\"sr-only\">\n        {isPending ? normalizedLabels.pending : \"\"}\n      </div>\n    ) : null\n  \n  const ErrorBox = () => {\n    if (!error) return null\n    const message = error instanceof Error ? error.message : normalizedLabels.error\n    \n    return (\n      <div\n        ref={internalErrorRef}\n        role=\"alert\"\n        aria-live=\"assertive\"\n        tabIndex={-1}\n        className=\"mt-2 flex items-start gap-2 rounded-md border border-red-200 bg-red-50 px-3 py-2 text-sm text-red-700 focus:outline-none focus:ring-2 focus:ring-red-300\"\n      >\n        <AlertCircle className=\"mt-0.5 size-4\" aria-hidden={true} />\n        <div>{message}</div>\n      </div>\n    )\n  }\n  \n  const renderBirthdateMethod = () => (\n    <div className=\"space-y-4\">\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"birthdate\">{normalizedLabels.birthdateLabel}</Label>\n        <Input\n          id=\"birthdate\"\n          type=\"date\"\n          value={birthdate}\n          onChange={(e) => setBirthdate(e.target.value)}\n          placeholder={normalizedLabels.birthdatePlaceholder}\n          disabled={isPending}\n          className=\"w-full\"\n        />\n      </div>\n      \n      {rememberVerification && (\n        <div className=\"flex items-center space-x-2\">\n          <input\n            id=\"remember\"\n            type=\"checkbox\"\n            checked={rememberChoice}\n            onChange={(e) => setRememberChoice(e.target.checked)}\n            disabled={isPending}\n            className=\"rounded border-gray-300\"\n          />\n          <Label htmlFor=\"remember\" className=\"text-sm\">\n            {normalizedLabels.rememberChoice}\n          </Label>\n        </div>\n      )}\n      \n      <ErrorBox />\n    </div>\n  )\n  \n  const renderSimpleMethod = () => (\n    <div className=\"space-y-4\">\n      {rememberVerification && (\n        <div className=\"flex items-center space-x-2\">\n          <input\n            id=\"remember\"\n            type=\"checkbox\"\n            checked={rememberChoice}\n            onChange={(e) => setRememberChoice(e.target.checked)}\n            disabled={isPending}\n            className=\"rounded border-gray-300\"\n          />\n          <Label htmlFor=\"remember\" className=\"text-sm\">\n            {normalizedLabels.rememberChoice}\n          </Label>\n        </div>\n      )}\n      \n      <ErrorBox />\n    </div>\n  )\n  \n  const renderCustomMethod = () => {\n    if (!customVerification) return null\n    \n    return customVerification({\n      isPending,\n      error,\n      onVerify: handleVerification,\n      resetError,\n      registerErrorRef,\n      focusError,\n    })\n  }\n  \n  const renderFooter = () => {\n    if (method === \"custom\") return null\n    \n    if (method === \"simple\") {\n      return (\n        <DialogFooter className=\"gap-2 sm:justify-center\">\n          {allowCancel && (\n            <Button\n              onClick={() => handleSimpleVerification(false)}\n              disabled={isPending}\n              variant=\"outline\"\n              aria-describedby={announcePending ? statusId : undefined}\n            >\n              {normalizedLabels.simpleCancel}\n            </Button>\n          )}\n          <Button\n            onClick={() => handleSimpleVerification(true)}\n            disabled={isPending}\n            aria-busy={isPending}\n            aria-describedby={announcePending ? statusId : undefined}\n            className=\"bg-neutral-900 text-white hover:bg-neutral-800\"\n          >\n            {isPending ? (\n              <span className=\"inline-flex items-center gap-2\">\n                <Loader2 className=\"size-4 animate-spin\" aria-hidden={true} />\n                {normalizedLabels.pending}\n              </span>\n            ) : (\n              normalizedLabels.simpleConfirm\n            )}\n          </Button>\n        </DialogFooter>\n      )\n    }\n    \n    if (method === \"birthdate\") {\n      return (\n        <DialogFooter className=\"gap-2 sm:justify-end\">\n          {allowCancel && (\n            <Button\n              onClick={() => handleOpenChange(false)}\n              disabled={isPending}\n              variant=\"outline\"\n            >\n              {normalizedLabels.cancel}\n            </Button>\n          )}\n          <Button\n            onClick={handleBirthdateVerification}\n            disabled={isPending}\n            aria-busy={isPending}\n            aria-describedby={announcePending ? statusId : undefined}\n            className=\"bg-neutral-900 text-white hover:bg-neutral-800\"\n          >\n            {isPending ? (\n              <span className=\"inline-flex items-center gap-2\">\n                <Loader2 className=\"size-4 animate-spin\" aria-hidden={true} />\n                {normalizedLabels.pending}\n              </span>\n            ) : (\n              normalizedLabels.confirm\n            )}\n          </Button>\n        </DialogFooter>\n      )\n    }\n    \n    return null\n  }\n  \n  return (\n    <div\n      ref={ref}\n      className={cn(\"\", className)}\n      data-testid={testId}\n    >\n      <Dialog open={effectiveOpen} onOpenChange={handleOpenChange}>\n        <DialogContent className=\"sm:max-w-md\">\n          <PendingStatus />\n          \n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <IconComponent className=\"size-4 text-neutral-500\" aria-hidden={true} />\n              {normalizedLabels.title}\n            </DialogTitle>\n            <DialogDescription>\n              {normalizedLabels.description}\n            </DialogDescription>\n          </DialogHeader>\n          \n          {children && (\n            <div className=\"px-1 py-2 border-t border-b border-gray-100\">\n              {children}\n            </div>\n          )}\n          \n          <div className=\"px-1\">\n            {method === \"birthdate\" && renderBirthdateMethod()}\n            {method === \"simple\" && renderSimpleMethod()}\n            {method === \"custom\" && renderCustomMethod()}\n          </div>\n          \n          {renderFooter()}\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n})\n\nexport default AgeGate"
    }
  ]
}