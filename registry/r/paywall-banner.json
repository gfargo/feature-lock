{
  "name": "paywall-banner",
  "type": "registry:ui",
  "dependencies": [
    "react@^19.0.0",
    "lucide-react@^0.454.0",
    "class-variance-authority@^0.7.1",
    "clsx@^2.1.1",
    "tailwind-merge@^3.3.1"
  ],
  "registryDependencies": [
    "button",
    "badge"
  ],
  "files": [
    {
      "type": "registry:lib",
      "path": "components/paywallBanner/paywall-banner.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport type { LucideIcon } from \"lucide-react\"\nimport { Megaphone, Loader2, X } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\n\nexport type PaywallBannerVariant = \"upgrade\" | \"info\" | \"success\" | \"warning\"\n\ntype VariantConfig = {\n  container: string\n  iconWrapper: string\n  accentText: string\n  badgeClassName: string\n}\n\nconst variantConfig: Record<PaywallBannerVariant, VariantConfig> = {\n  upgrade: {\n    container: \"border border-primary/20 bg-primary/10\",\n    iconWrapper: \"bg-primary/15 text-primary shadow-sm shadow-primary/20\",\n    accentText: \"text-primary\",\n    badgeClassName: \"bg-primary text-primary-foreground\",\n  },\n  info: {\n    container: \"border border-blue-500/20 bg-blue-500/10 dark:border-blue-400/25 dark:bg-blue-500/5\",\n    iconWrapper: \"bg-blue-500/15 text-blue-600 dark:text-blue-400 shadow-sm shadow-blue-500/20\",\n    accentText: \"text-blue-600 dark:text-blue-400\",\n    badgeClassName: \"bg-blue-500/15 text-blue-600 dark:text-blue-300\",\n  },\n  success: {\n    container: \"border border-emerald-500/20 bg-emerald-500/10 dark:border-emerald-400/25 dark:bg-emerald-500/5\",\n    iconWrapper: \"bg-emerald-500/15 text-emerald-600 dark:text-emerald-400 shadow-sm shadow-emerald-500/20\",\n    accentText: \"text-emerald-600 dark:text-emerald-400\",\n    badgeClassName: \"bg-emerald-500/15 text-emerald-600 dark:text-emerald-300\",\n  },\n  warning: {\n    container: \"border border-amber-500/30 bg-amber-500/10 dark:border-amber-400/35 dark:bg-amber-500/5\",\n    iconWrapper: \"bg-amber-500/20 text-amber-600 dark:text-amber-400 shadow-sm shadow-amber-500/20\",\n    accentText: \"text-amber-700 dark:text-amber-400\",\n    badgeClassName: \"bg-amber-500/20 text-amber-700 dark:text-amber-300\",\n  },\n}\n\nexport type PaywallBannerProps = {\n  title: string\n  description?: string\n  badge?: string | null\n  icon?: LucideIcon\n  variant?: PaywallBannerVariant\n  ctaLabel?: string\n  ctaHref?: string\n  ctaPendingLabel?: string\n  onCtaClick?: () => Promise<void> | void\n  onCtaSuccess?: () => void\n  onCtaError?: (error: unknown) => void\n  secondaryLabel?: string\n  secondaryHref?: string\n  onSecondaryClick?: () => Promise<void> | void\n  onSecondarySuccess?: () => void\n  onSecondaryError?: (error: unknown) => void\n  dismissible?: boolean\n  dismissLabel?: string\n  onDismiss?: () => void\n  storageKey?: string\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n  errorMessage?: string\n  showDivider?: boolean\n  className?: string\n  contentClassName?: string\n  actionsClassName?: string\n  children?: React.ReactNode\n}\n\nexport const PaywallBanner = React.forwardRef<HTMLDivElement, PaywallBannerProps>(\n  function PaywallBanner(\n    {\n      title,\n      description,\n      badge = \"New\",\n      icon: Icon = Megaphone,\n      variant = \"upgrade\",\n      ctaLabel = \"Upgrade now\",\n      ctaHref,\n      ctaPendingLabel = \"Working...\",\n      onCtaClick,\n      onCtaSuccess,\n      onCtaError,\n      secondaryLabel,\n      secondaryHref,\n      onSecondaryClick,\n      onSecondarySuccess,\n      onSecondaryError,\n      dismissible = true,\n      dismissLabel = \"Dismiss banner\",\n      onDismiss,\n      storageKey,\n      defaultOpen = true,\n      open,\n      onOpenChange,\n      errorMessage = \"Something went wrong. Please try again.\",\n      showDivider = false,\n      className,\n      contentClassName,\n      actionsClassName,\n      children,\n    },\n    ref,\n  ) {\n    const isControlled = open !== undefined\n    const [internalOpen, setInternalOpen] = React.useState(defaultOpen)\n    const [ctaPending, setCtaPending] = React.useState(false)\n    const [secondaryPending, setSecondaryPending] = React.useState(false)\n    const [ctaError, setCtaError] = React.useState<unknown>(null)\n    const [hydrated, setHydrated] = React.useState(!storageKey)\n\n    React.useEffect(() => {\n      if (!storageKey) return\n      if (typeof window === \"undefined\") return\n\n      try {\n        const stored = window.localStorage.getItem(storageKey)\n        if (!isControlled && stored === \"dismissed\") {\n          setInternalOpen(false)\n        }\n      } finally {\n        setHydrated(true)\n      }\n    }, [isControlled, storageKey])\n\n    const isOpen = isControlled ? open! : internalOpen\n\n    const config = variantConfig[variant]\n\n    const setOpen = React.useCallback(\n      (next: boolean) => {\n        if (!isControlled) {\n          setInternalOpen(next)\n        }\n        onOpenChange?.(next)\n      },\n      [isControlled, onOpenChange],\n    )\n\n    const handleDismiss = React.useCallback(() => {\n      setOpen(false)\n      if (storageKey && typeof window !== \"undefined\") {\n        window.localStorage.setItem(storageKey, \"dismissed\")\n      }\n      onDismiss?.()\n    }, [onDismiss, setOpen, storageKey])\n\n    const handleCtaClick = React.useCallback(async () => {\n      if (!onCtaClick) return\n      setCtaPending(true)\n      setCtaError(null)\n      try {\n        await onCtaClick()\n        onCtaSuccess?.()\n      } catch (error) {\n        setCtaError(error)\n        onCtaError?.(error)\n      } finally {\n        setCtaPending(false)\n      }\n    }, [onCtaClick, onCtaError, onCtaSuccess])\n\n    const handleSecondaryClick = React.useCallback(async () => {\n      if (!onSecondaryClick) return\n      setSecondaryPending(true)\n      try {\n        await onSecondaryClick()\n        onSecondarySuccess?.()\n      } catch (error) {\n        onSecondaryError?.(error)\n      } finally {\n        setSecondaryPending(false)\n      }\n    }, [onSecondaryClick, onSecondaryError, onSecondarySuccess])\n\n    if (!isOpen || !hydrated) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        role=\"status\"\n        aria-live=\"polite\"\n        className={cn(\n          \"relative overflow-hidden rounded-2xl border px-5 py-4 shadow-sm backdrop-blur-sm transition-all\",\n          config.container,\n          className,\n        )}\n      >\n        <div className=\"flex flex-col gap-4 md:flex-row md:items-start md:justify-between\">\n          <div className=\"flex flex-1 items-start gap-4\">\n            <span\n              className={cn(\n                \"flex size-12 items-center justify-center rounded-xl border border-transparent\",\n                config.iconWrapper,\n              )}\n              aria-hidden=\"true\"\n            >\n              <Icon className=\"size-6\" />\n            </span>\n\n            <div className={cn(\"flex-1 space-y-2 text-sm text-muted-foreground\", contentClassName)}>\n              {badge ? (\n                <Badge className={cn(\"uppercase tracking-wide\", config.badgeClassName)}>{badge}</Badge>\n              ) : null}\n\n              <div className=\"space-y-1 text-foreground\">\n                <p className={cn(\"text-base font-semibold leading-tight\", config.accentText)}>{title}</p>\n                {description ? <p className=\"text-sm text-muted-foreground\">{description}</p> : null}\n              </div>\n\n              {children ? <div className=\"text-sm text-muted-foreground\">{children}</div> : null}\n\n              {ctaError ? (\n                <div className=\"rounded-md border border-destructive/30 bg-destructive/10 px-3 py-2 text-sm font-medium text-destructive\">\n                  {ctaError instanceof Error ? ctaError.message : errorMessage}\n                </div>\n              ) : null}\n            </div>\n          </div>\n\n          <div\n            className={cn(\n              \"flex w-full flex-col gap-2 border-t border-primary/10 pt-4 pr-8 md:w-auto md:flex-shrink-0 md:flex-row md:items-center md:gap-3 md:border-0 md:pt-0\",\n              showDivider && \"md:border-l md:pl-4\",\n              actionsClassName,\n            )}\n          >\n            {ctaLabel ? (\n              ctaHref && !onCtaClick ? (\n                <Button asChild>\n                  <a href={ctaHref} target=\"_blank\" rel=\"noreferrer\">\n                    {ctaLabel}\n                  </a>\n                </Button>\n              ) : (\n                <Button onClick={handleCtaClick} disabled={ctaPending}>\n                  {ctaPending ? (\n                    <>\n                      <Loader2 className=\"size-4 animate-spin\" aria-hidden=\"true\" />\n                      {ctaPendingLabel}\n                    </>\n                  ) : (\n                    ctaLabel\n                  )}\n                </Button>\n              )\n            ) : null}\n\n            {secondaryLabel ? (\n              secondaryHref && !onSecondaryClick ? (\n                <Button variant=\"outline\" asChild>\n                  <a href={secondaryHref} target=\"_blank\" rel=\"noreferrer\">\n                    {secondaryLabel}\n                  </a>\n                </Button>\n              ) : (\n                <Button variant=\"outline\" onClick={handleSecondaryClick} disabled={secondaryPending}>\n                  {secondaryPending ? (\n                    <>\n                      <Loader2 className=\"size-4 animate-spin\" aria-hidden=\"true\" />\n                      Working...\n                    </>\n                  ) : (\n                    secondaryLabel\n                  )}\n                </Button>\n              )\n            ) : null}\n          </div>\n        </div>\n\n        {dismissible ? (\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"absolute right-2 top-2 text-muted-foreground hover:text-foreground\"\n            onClick={handleDismiss}\n            aria-label={dismissLabel}\n          >\n            <X className=\"size-4\" aria-hidden=\"true\" />\n          </Button>\n        ) : null}\n      </div>\n    )\n  },\n) \n\nPaywallBanner.displayName = \"PaywallBanner\"\n"
    }
  ]
}