{
  "name": "usage-progress",
  "type": "registry:ui",
  "dependencies": [
    "react@^19.0.0",
    "lucide-react@^0.454.0",
    "class-variance-authority@^0.7.1",
    "clsx@^2.1.1",
    "tailwind-merge@^3.3.1"
  ],
  "registryDependencies": [
    "button",
    "badge"
  ],
  "files": [
    {
      "type": "registry:lib",
      "path": "components/usageProgress/usage-progress-bar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\ntype ProgressBarProps = {\n  percentage: number\n  status?: \"ok\" | \"warning\" | \"critical\"\n  className?: string\n}\n\nexport function ProgressBar({ percentage, status = \"ok\", className }: ProgressBarProps) {\n  const clamped = Math.min(100, Math.max(0, percentage))\n\n  const statusClasses = {\n    ok: \"bg-emerald-500\",\n    warning: \"bg-amber-500\",\n    critical: \"bg-red-500\",\n  }[status]\n\n  return (\n    <div className={cn(\"h-2 w-full rounded-full bg-muted overflow-hidden\", className)}>\n      <div\n        className={cn(\"h-full rounded-full transition-all duration-500 ease-out\", statusClasses)}\n        style={{ width: `${clamped}%` }}\n        role=\"progressbar\"\n        aria-valuenow={clamped}\n        aria-valuemin={0}\n        aria-valuemax={100}\n      />\n    </div>\n  )\n}\n"
    },
    {
      "type": "registry:lib",
      "path": "components/usageProgress/usage-progress.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { ProgressBar } from \"./usage-progress-bar\"\nimport { ArrowRight, Info } from \"lucide-react\"\n\ntype UsageTrend = \"up\" | \"down\" | \"steady\"\n\nexport type UsageTrack = {\n  label: string\n  value: number\n  limit?: number\n  percentage?: number\n  status?: \"ok\" | \"warning\" | \"critical\"\n  badge?: string\n  trend?: UsageTrend\n  description?: string\n}\n\nexport type UsageProgressProps = {\n  title?: string\n  subtitle?: string\n  tracks: UsageTrack[]\n  variant?: \"card\" | \"inline\"\n  showSummary?: boolean\n  summaryLabel?: string\n  summaryValue?: string\n  summaryMessage?: string\n  ctaLabel?: string\n  ctaHref?: string\n  ctaPendingLabel?: string\n  onCtaClick?: () => Promise<void> | void\n  onCtaSuccess?: () => void\n  onCtaError?: (error: unknown) => void\n  secondaryLabel?: string\n  onSecondaryClick?: () => void\n  footer?: React.ReactNode\n  className?: string\n  trackClassName?: string\n  summaryClassName?: string\n  footerClassName?: string\n  pending?: boolean\n  note?: string\n}\n\nfunction getStatusClasses(status: UsageTrack[\"status\"]) {\n  switch (status) {\n    case \"ok\":\n      return \"text-emerald-500 bg-emerald-500/10 border-emerald-500/20\"\n    case \"warning\":\n      return \"text-amber-500 bg-amber-500/10 border-amber-500/20\"\n    case \"critical\":\n      return \"text-red-500 bg-red-500/10 border-red-500/20\"\n    default:\n      return \"text-muted-foreground bg-muted/40 border-muted/30\"\n  }\n}\n\nfunction calculatePercentage(track: UsageTrack) {\n  if (track.percentage !== undefined) return Math.min(100, Math.max(0, track.percentage))\n  if (track.limit === undefined || track.limit === 0) return 0\n  return Math.min(100, Math.max(0, Math.round((track.value / track.limit) * 100)))\n}\n\nfunction getTrendLabel(trend?: UsageTrend) {\n  switch (trend) {\n    case \"up\":\n      return \"↑\"\n    case \"down\":\n      return \"↓\"\n    case \"steady\":\n      return \"→\"\n    default:\n      return \"\"\n  }\n}\n\nexport function UsageProgress({\n  title = \"Usage overview\",\n  subtitle = \"Stay on top of quota limits and see when to upgrade.\",\n  tracks,\n  variant = \"card\",\n  showSummary = true,\n  summaryLabel = \"Upgrade unlocks\",\n  summaryValue,\n  summaryMessage,\n  ctaLabel = \"Upgrade plan\",\n  ctaHref,\n  ctaPendingLabel = \"Working...\",\n  onCtaClick,\n  onCtaSuccess,\n  onCtaError,\n  secondaryLabel,\n  onSecondaryClick,\n  footer,\n  note,\n  className,\n  trackClassName,\n  summaryClassName,\n  footerClassName,\n  pending = false,\n}: UsageProgressProps) {\n  const [ctaPending, setCtaPending] = React.useState(false)\n  const [ctaError, setCtaError] = React.useState<unknown>(null)\n\n  React.useEffect(() => {\n    if (!pending) {\n      setCtaPending(false)\n    }\n  }, [pending])\n\n  const handleCtaClick = React.useCallback(async () => {\n    if (!onCtaClick) return\n    setCtaPending(true)\n    setCtaError(null)\n\n    try {\n      await onCtaClick()\n      onCtaSuccess?.()\n    } catch (error) {\n      setCtaError(error)\n      onCtaError?.(error)\n    } finally {\n      setCtaPending(false)\n    }\n  }, [onCtaClick, onCtaError, onCtaSuccess])\n\n  const Wrapper = variant === \"card\" ? \"div\" : \"section\"\n\n  return (\n    <Wrapper\n      className={cn(\n        \"w-full rounded-2xl border border-primary/10 bg-card/80 p-6 shadow-sm backdrop-blur-sm\",\n        variant === \"card\" && \"space-y-6\",\n        className,\n      )}\n    >\n      <header className=\"space-y-2\">\n        <h2 className=\"text-lg font-semibold text-foreground\">{title}</h2>\n        <p className=\"text-sm text-muted-foreground\">{subtitle}</p>\n      </header>\n\n      <div className={cn(\"space-y-4\", trackClassName)}>\n        {tracks.map((track) => {\n          const percentage = calculatePercentage(track)\n          const statusClasses = getStatusClasses(track.status)\n          const trendLabel = getTrendLabel(track.trend)\n          const limitLabel = track.limit !== undefined ? ` / ${track.limit.toLocaleString()}` : \"\"\n\n          return (\n            <article\n              key={track.label}\n              className=\"rounded-xl border border-primary/15 bg-background/60 p-4 shadow-xs transition-colors\"\n            >\n              <div className=\"flex flex-wrap items-center justify-between gap-3\">\n                <div>\n                  <p className=\"text-sm font-medium text-foreground\">{track.label}</p>\n                  {track.description ? <p className=\"text-xs text-muted-foreground\">{track.description}</p> : null}\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  {track.badge ? (\n                    <Badge variant=\"outline\" className={cn(\"text-xs\", statusClasses)}>\n                      {track.badge}\n                    </Badge>\n                  ) : null}\n                  <p className=\"text-sm font-semibold text-foreground\">\n                    {track.value.toLocaleString()}\n                    {limitLabel}\n                    {trendLabel ? <span className=\"ml-1 text-muted-foreground\">{trendLabel}</span> : null}\n                  </p>\n                </div>\n              </div>\n              <div className=\"mt-3\">\n                <ProgressBar percentage={percentage} status={track.status} />\n              </div>\n            </article>\n          )\n        })}\n      </div>\n\n      {showSummary ? (\n        <div\n          className={cn(\n            \"rounded-xl border border-primary/15 bg-primary/5 p-4 text-sm text-muted-foreground flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between\",\n            summaryClassName,\n          )}\n        >\n          <div className=\"flex items-start gap-2\">\n            <Info className=\"mt-0.5 size-4 text-primary\" aria-hidden=\"true\" />\n            <div>\n              <p className=\"font-medium text-foreground\">{summaryLabel}</p>\n              {summaryMessage ? <p className=\"text-xs text-muted-foreground\">{summaryMessage}</p> : null}\n            </div>\n          </div>\n          {summaryValue ? <p className=\"text-sm font-semibold text-primary\">{summaryValue}</p> : null}\n        </div>\n      ) : null}\n\n      {ctaError ? (\n        <p className=\"rounded-md border border-red-300 bg-red-50 px-3 py-2 text-sm text-red-700\">\n          {ctaError instanceof Error ? ctaError.message : \"Something went wrong. Please try again.\"}\n        </p>\n      ) : null}\n\n      {(ctaHref || onCtaClick || secondaryLabel) && (\n        <div className=\"flex flex-col gap-2 sm:flex-row sm:items-center sm:justify-between\">\n          <div className=\"flex gap-2\">\n            {ctaHref && !onCtaClick ? (\n              <Button asChild disabled={pending}>\n                <a href={ctaHref} target=\"_blank\" rel=\"noreferrer\">\n                  {ctaLabel}\n                </a>\n              </Button>\n            ) : (\n              <Button onClick={handleCtaClick} disabled={ctaPending || pending} aria-busy={ctaPending || pending}>\n                {ctaPending || pending ? (\n                  <span>{ctaPendingLabel}</span>\n                ) : (\n                  <>\n                    {ctaLabel}\n                    <ArrowRight className=\"ml-2 size-4\" aria-hidden=\"true\" />\n                  </>\n                )}\n              </Button>\n            )}\n            {secondaryLabel ? (\n              <Button variant=\"outline\" onClick={onSecondaryClick} disabled={pending}>\n                {secondaryLabel}\n              </Button>\n            ) : null}\n          </div>\n          {note ? <p className=\"text-xs text-muted-foreground\">{note}</p> : null}\n        </div>\n      )}\n\n      {footer ? <div className={cn(\"pt-4 border-t border-primary/10\", footerClassName)}>{footer}</div> : null}\n    </Wrapper>\n  )\n}\n"
    }
  ]
}