{
  "name": "feature-tooltip-full",
  "type": "registry:ui",
  "dependencies": [
    "react@^19.0.0",
    "lucide-react@^0.454.0",
    "class-variance-authority@^0.7.1",
    "clsx@^2.1.1",
    "tailwind-merge@^3.3.1"
  ],
  "registryDependencies": [
    "button",
    "badge"
  ],
  "files": [
    {
      "type": "registry:doc",
      "path": "components/featureTooltip/README.md",
      "content": "# FeatureTooltip\n\nInline tooltip that teases locked functionality and nudges users toward upgrading without interrupting their flow.\n\n**Key Features:**\n- Hover/focus trigger with Radix tooltip accessibility baked in\n- Optional upgrade CTA (async handler or external link) with loading + error states\n- Highlight list to preview the value users unlock\n- Customizable badge, icon, alignment, and placement\n\n**Installation:**\n```bash\nnpx shadcn@latest add https://feature-lock.griffen.codes/r/feature-tooltip\n```\n\n**Import:**\n```typescript\nimport { FeatureTooltip } from \"@/components/featureTooltip/feature-tooltip\"\n```\n\nSee the [root README](../../README.md) for registry details.\n\n---\n\n## Usage Examples\n\n### Basic Usage\n\n```tsx\n<FeatureTooltip\n  title=\"Pro analytics\"\n  description=\"Breakdowns, saved filters, and cohort exports.\"\n  highlights={[\n    \"Unlimited dashboards\",\n    \"CSV + PDF exports\",\n    \"Segment comparisons\",\n  ]}\n  ctaLabel=\"View pricing\"\n  ctaHref=\"/pricing\"\n>\n  <button className=\"inline-flex items-center gap-2 text-sm font-medium text-muted-foreground\">\n    <Lock className=\"size-4\" aria-hidden=\"true\" />\n    Team insights (Pro)\n  </button>\n</FeatureTooltip>\n```\n\n### Async CTA\n\n```tsx\n<FeatureTooltip\n  title=\"Start your Pro trial\"\n  description=\"We&apos;ll ask for billing details later.\"\n  highlights={[\"14-day trial\", \"Cancel anytime\"]}\n  ctaLabel=\"Start trial\"\n  ctaPendingLabel=\"Starting...\"\n  onCtaClick={async () => {\n    const response = await fetch(\"/api/trial\", { method: \"POST\" })\n    if (!response.ok) throw new Error(\"Trial could not be started\")\n  }}\n>\n  <span className=\"inline-flex items-center gap-1 text-sm text-primary\">\n    <Sparkles className=\"size-4\" aria-hidden=\"true\" />\n    Launch automation (trial)\n  </span>\n</FeatureTooltip>\n```\n\n### Controlled Visibility\n\n```tsx\nconst [open, setOpen] = useState(false)\n\n<FeatureTooltip\n  open={open}\n  onOpenChange={setOpen}\n  title=\"Quota reached\"\n  description=\"Upgrade to keep exporting unlimited reports.\"\n  highlights={[\"Up to 5k exports / month\", \"Priority support\"]}\n  ctaLabel=\"Upgrade\"\n  ctaHref=\"/billing\"\n>\n  <Button onClick={() => setOpen(!open)} variant=\"ghost\" size=\"sm\">\n    Upgrade options\n  </Button>\n</FeatureTooltip>\n```\n\n---\n\n## API Reference\n\n| Prop | Type | Default | Description |\n|------|------|---------|-------------|\n| `title` | `string` | — | Primary heading inside the tooltip |\n| `description` | `string` | — | Supporting copy displayed under the title |\n| `badge` | `string \\| null` | `\"Upgrade to unlock\"` | Optional badge text; set to `null` to hide it |\n| `icon` | `LucideIcon` | `Lock` | Icon shown in the tooltip header |\n| `highlights` | `(string \\| { icon?: LucideIcon; label: string })[]` | — | Value props rendered as a list |\n| `ctaLabel` | `string` | `\"Upgrade\"` | Text for the primary CTA |\n| `ctaHref` | `string` | — | Link target for CTA when no async handler is provided |\n| `ctaPendingLabel` | `string` | `\"Working...\"` | Text while `onCtaClick` resolves |\n| `onCtaClick` | `() => Promise<void> \\| void` | — | Async handler for CTA button |\n| `onCtaSuccess` | `() => void` | — | Fired after `onCtaClick` resolves |\n| `onCtaError` | `(error: unknown) => void` | — | Fired when `onCtaClick` rejects |\n| `side` | `\"top\" \\| \"bottom\" \\| \"left\" \\| \"right\"` | `\"top\"` | Tooltip placement relative to trigger |\n| `align` | `\"start\" \\| \"center\" \\| \"end\"` | `\"center\"` | Alignment of tooltip on chosen side |\n| `delayDuration` | `number` | `200` | Delay before the tooltip opens (ms) |\n| `open` | `boolean` | — | Controlled visibility state |\n| `defaultOpen` | `boolean` | — | Initial visibility for uncontrolled usage |\n| `onOpenChange` | `(open: boolean) => void` | — | Called when tooltip open state changes |\n| `disabled` | `boolean` | `false` | Render children without tooltip behavior |\n| `className` | `string` | — | Classes applied to the trigger wrapper |\n| `contentClassName` | `string` | — | Classes applied to the tooltip content |\n\n`FeatureTooltip` wraps Radix tooltip primitives, so focus and hover interactions follow accessibility best practices out of the box. Add the component wherever you need lightweight upsells—tables, buttons, inline text, or icons.\n"
    },
    {
      "type": "registry:lib",
      "path": "components/featureTooltip/feature-tooltip.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport type { TooltipContentProps } from \"@radix-ui/react-tooltip\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\"\nimport { cn } from \"@/lib/utils\"\nimport { ArrowRight, CheckCircle2, Loader2, Lock } from \"lucide-react\"\nimport type { LucideIcon } from \"lucide-react\"\n\ntype HighlightItem =\n  | string\n  | {\n      icon?: LucideIcon\n      label: string\n    }\n\nexport type FeatureTooltipProps = {\n  children: React.ReactNode\n  title: string\n  description?: string\n  badge?: string | null\n  icon?: LucideIcon\n  highlights?: HighlightItem[]\n  ctaLabel?: string\n  ctaHref?: string\n  ctaPendingLabel?: string\n  onCtaClick?: () => Promise<void> | void\n  onCtaSuccess?: () => void\n  onCtaError?: (error: unknown) => void\n  side?: TooltipContentProps[\"side\"]\n  align?: TooltipContentProps[\"align\"]\n  sideOffset?: number\n  delayDuration?: number\n  open?: boolean\n  defaultOpen?: boolean\n  onOpenChange?: (open: boolean) => void\n  disabled?: boolean\n  className?: string\n  contentClassName?: string\n  badgeClassName?: string\n  highlightIcon?: LucideIcon\n}\n\nexport const FeatureTooltip = React.forwardRef<HTMLDivElement, FeatureTooltipProps>(function FeatureTooltip(\n  {\n    children,\n    title,\n    description,\n    badge = \"Upgrade to unlock\",\n    icon: Icon = Lock,\n    highlights,\n    highlightIcon = CheckCircle2,\n    ctaLabel = \"Upgrade\",\n    ctaHref,\n    ctaPendingLabel = \"Working...\",\n    onCtaClick,\n    onCtaSuccess,\n    onCtaError,\n    side = \"top\",\n    align = \"center\",\n    sideOffset = 12,\n    delayDuration = 200,\n    open,\n    defaultOpen,\n    onOpenChange,\n    disabled = false,\n    className,\n    contentClassName,\n    badgeClassName,\n  },\n  ref,\n) {\n  const isControlled = open !== undefined\n  const [internalOpen, setInternalOpen] = React.useState(defaultOpen ?? false)\n  const [ctaPending, setCtaPending] = React.useState(false)\n  const [ctaError, setCtaError] = React.useState<unknown>(null)\n\n  React.useEffect(() => {\n    if (!isControlled && defaultOpen !== undefined) {\n      setInternalOpen(defaultOpen)\n    }\n  }, [defaultOpen, isControlled])\n\n  const currentOpen = isControlled ? open : internalOpen\n\n  const setOpen = React.useCallback(\n    (next: boolean) => {\n      if (!isControlled) {\n        setInternalOpen(next)\n      }\n      onOpenChange?.(next)\n    },\n    [isControlled, onOpenChange],\n  )\n\n  const handleCta = React.useCallback(async () => {\n    if (!onCtaClick) return\n    setCtaPending(true)\n    setCtaError(null)\n    try {\n      await onCtaClick()\n      onCtaSuccess?.()\n      setOpen(false)\n    } catch (error) {\n      setCtaError(error)\n      onCtaError?.(error)\n    } finally {\n      setCtaPending(false)\n    }\n  }, [onCtaClick, onCtaError, onCtaSuccess, setOpen])\n\n  const normalizedHighlights = React.useMemo(() => {\n    if (!highlights?.length) return []\n    return highlights.map((item) =>\n      typeof item === \"string\"\n        ? {\n            icon: highlightIcon,\n            label: item,\n          }\n        : {\n            icon: item.icon ?? highlightIcon,\n            label: item.label,\n          },\n    )\n  }, [highlightIcon, highlights])\n\n  if (disabled) {\n    return <>{children}</>\n  }\n\n  return (\n    <TooltipProvider delayDuration={delayDuration}>\n      <Tooltip\n        open={currentOpen}\n        onOpenChange={(next) => {\n          setOpen(next)\n        }}\n      >\n        <TooltipTrigger asChild>\n          <span className={cn(\"inline-flex items-center gap-2 text-left\", className)}>{children}</span>\n        </TooltipTrigger>\n        <TooltipContent\n          ref={ref}\n          side={side}\n          align={align}\n          sideOffset={sideOffset}\n          className={cn(\n            \"flex max-w-sm gap-3 rounded-2xl border border-primary/20 bg-background/95 p-4 text-left shadow-lg backdrop-blur-md\",\n            contentClassName,\n          )}\n        >\n          <div className=\"flex flex-col gap-3\">\n            <div className=\"flex items-start gap-3\">\n              <span className=\"flex size-9 items-center justify-center rounded-lg bg-primary/10 text-primary\">\n                <Icon className=\"size-4\" aria-hidden=\"true\" />\n              </span>\n              <div className=\"space-y-2\">\n                {badge ? (\n                  <Badge className={cn(\"uppercase tracking-wide\", badgeClassName)} variant=\"outline\">\n                    {badge}\n                  </Badge>\n                ) : null}\n                <div className=\"space-y-1\">\n                  <p className=\"text-sm font-semibold text-foreground\">{title}</p>\n                  {description ? <p className=\"text-xs text-muted-foreground\">{description}</p> : null}\n                </div>\n              </div>\n            </div>\n\n            {normalizedHighlights.length ? (\n              <ul className=\"space-y-1 pl-0\">\n                {normalizedHighlights.map((item, index) => {\n                  const ItemIcon = item.icon\n                  return (\n                    <li key={`${item.label}-${index}`} className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                      {ItemIcon ? <ItemIcon className=\"size-3 text-primary\" aria-hidden=\"true\" /> : null}\n                      <span>{item.label}</span>\n                    </li>\n                  )\n                })}\n              </ul>\n            ) : null}\n\n            {ctaError ? (\n              <div className=\"rounded-md border border-destructive/40 bg-destructive/10 px-3 py-2 text-xs font-medium text-destructive\">\n                {ctaError instanceof Error ? ctaError.message : \"Something went wrong. Please try again.\"}\n              </div>\n            ) : null}\n\n            {(ctaHref && !onCtaClick) || onCtaClick ? (\n              <div className=\"flex items-center gap-2\">\n                {ctaHref && !onCtaClick ? (\n                  <Button size=\"sm\" asChild>\n                    <a href={ctaHref} target=\"_blank\" rel=\"noreferrer\">\n                      <span>{ctaLabel}</span>\n                      <ArrowRight className=\"ml-1 size-3\" aria-hidden=\"true\" />\n                    </a>\n                  </Button>\n                ) : (\n                  <Button size=\"sm\" onClick={handleCta} disabled={ctaPending}>\n                    {ctaPending ? (\n                      <>\n                        <Loader2 className=\"size-3 animate-spin\" aria-hidden=\"true\" />\n                        {ctaPendingLabel}\n                      </>\n                    ) : (\n                      <>\n                        {ctaLabel}\n                        <ArrowRight className=\"ml-1 size-3\" aria-hidden=\"true\" />\n                      </>\n                    )}\n                  </Button>\n                )}\n                {ctaHref && onCtaClick ? (\n                  <Button variant=\"outline\" size=\"sm\" asChild>\n                    <a href={ctaHref} target=\"_blank\" rel=\"noreferrer\">\n                      Details\n                    </a>\n                  </Button>\n                ) : null}\n              </div>\n            ) : null}\n          </div>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  )\n})\n\nFeatureTooltip.displayName = \"FeatureTooltip\"\n"
    },
    {
      "type": "registry:lib",
      "path": "components/ui/tooltip.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 8, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 max-w-xs overflow-hidden rounded-lg border border-primary/15 bg-popover px-3 py-2 text-sm text-popover-foreground shadow-md backdrop-blur-sm animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className,\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n"
    }
  ]
}