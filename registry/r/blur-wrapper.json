{
  "name": "blur-wrapper",
  "type": "registry:ui",
  "dependencies": [
    "react@^19.0.0",
    "lucide-react@^0.454.0",
    "class-variance-authority@^0.7.1",
    "clsx@^2.1.1",
    "tailwind-merge@^3.3.1",
    "@radix-ui/react-dialog@1.1.4"
  ],
  "registryDependencies": [
    "button",
    "dialog"
  ],
  "files": [
    {
      "type": "registry:lib",
      "path": "components/blurWrapper/blur-wrapper.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { AlertCircle, Lock, Loader2 } from \"lucide-react\"\nimport type { LucideIcon } from \"lucide-react\"\n\ntype BlurIntensity = \"sm\" | \"md\" | \"lg\" | \"xl\" | \"2xl\" | \"3xl\"\ntype OverlayMode = \"dialog\" | \"inline\"\n\nexport type InlinePosition =\n  | \"leftTop\"\n  | \"leftCenter\"\n  | \"leftBottom\"\n  | \"centerTop\"\n  | \"centerCenter\"\n  | \"centerBottom\"\n  | \"rightTop\"\n  | \"rightCenter\"\n  | \"rightBottom\"\n\nexport type OverlayRenderArgs = {\n  isPending: boolean\n  error: unknown | null\n  confirm: () => void\n  close: () => void\n  resetError: () => void\n  registerErrorRef: (el: HTMLElement | null) => void\n  focusError: () => void\n}\n\ntype Labels = {\n  confirm: string\n  pending: string\n  title: string\n  description: string\n  error: string\n  secondary?: string\n  secondaryPending?: string\n}\n\nexport type BlurWrapperProps = {\n  // Controls\n  isBlurred?: boolean\n  disablePointerEvents?: boolean\n\n  // Focus blocking\n  focusInert?: boolean // apply inert+aria-hidden to subtree while blurred\n\n  // Visuals\n  blurPx?: number // overrides blurIntensity when provided\n  blurIntensity?: BlurIntensity\n  dimOpacity?: number // 0..1 while blurred\n  className?: string\n  contentClassName?: string\n  testId?: string\n\n  // Custom icon\n  icon?: LucideIcon\n\n  // Overlay behavior\n  overlayMode?: OverlayMode\n  overlay?: React.ReactNode | ((args: OverlayRenderArgs) => React.ReactNode)\n  showOverlayOnBlur?: boolean\n  // Back-compat alias (deprecated)\n  showDialogOnBlur?: boolean\n\n  // Explicit open control (applies to both modes)\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n\n  // Async confirm wiring\n  onConfirm?: () => Promise<void> | void\n  onConfirmError?: (error: unknown) => void\n  onConfirmFinally?: (result: \"success\" | \"error\") => void\n\n  // Secondary button (optional)\n  onSecondaryConfirm?: () => Promise<void> | void\n  onSecondaryConfirmError?: (error: unknown) => void\n  onSecondaryConfirmFinally?: (result: \"success\" | \"error\") => void\n\n  // Labels (new) + back-compat single props\n  labels?: Partial<Labels>\n  confirmLabel?: string\n  pendingLabel?: string\n  dialogTitle?: string\n  dialogDescription?: string\n  errorMessage?: string\n  secondaryLabel?: string\n  secondaryPendingLabel?: string\n\n  // Behavior flags\n  autoCloseDialogOnConfirm?: boolean\n  autoUnblurOnConfirm?: boolean\n  resetErrorOnOpenChange?: boolean\n\n  // A11y controls\n  announcePending?: boolean\n  focusErrorOnSet?: boolean\n  returnFocusTo?: HTMLElement | string // selector or element to restore focus to after close\n\n  // Inline overlay positioning and styling\n  inlinePosition?: InlinePosition\n  inlineContainerClassName?: string\n  inlinePanelClassName?: string\n  inlineAriaLabel?: string\n\n  // Slot\n  children: React.ReactNode\n\n  // Unblur on success\n  onUnblur?: () => void\n}\n\nconst intensityToClass: Record<BlurIntensity, string> = {\n  sm: \"blur-sm\",\n  md: \"blur-md\",\n  lg: \"blur-lg\",\n  xl: \"blur-xl\",\n  \"2xl\": \"blur-2xl\",\n  \"3xl\": \"blur-3xl\",\n}\n\nfunction getPositionClasses(position: InlinePosition | undefined) {\n  const value = position ?? \"centerCenter\"\n  const map: Record<InlinePosition, { justify: string; items: string }> = {\n    leftTop: { justify: \"justify-start\", items: \"items-start\" },\n    leftCenter: { justify: \"justify-start\", items: \"items-center\" },\n    leftBottom: { justify: \"justify-start\", items: \"items-end\" },\n    centerTop: { justify: \"justify-center\", items: \"items-start\" },\n    centerCenter: { justify: \"justify-center\", items: \"items-center\" },\n    centerBottom: { justify: \"justify-center\", items: \"items-end\" },\n    rightTop: { justify: \"justify-end\", items: \"items-start\" },\n    rightCenter: { justify: \"justify-end\", items: \"items-center\" },\n    rightBottom: { justify: \"justify-end\", items: \"items-end\" },\n  }\n  const { justify, items } = map[value]\n  return `${justify} ${items}`\n}\n\nfunction mergeRefs<T>(...refs: Array<React.Ref<T> | undefined>) {\n  return (value: T) => {\n    for (const ref of refs) {\n      if (!ref) continue\n      if (typeof ref === \"function\") ref(value)\n      else (ref as React.MutableRefObject<T>).current = value\n    }\n  }\n}\n\nconst BlurWrapper = React.forwardRef<HTMLDivElement, BlurWrapperProps>(function BlurWrapper(\n  {\n    isBlurred = false,\n    disablePointerEvents = true,\n    focusInert = true,\n    blurPx,\n    blurIntensity = \"md\",\n    dimOpacity = 1,\n    className,\n    contentClassName,\n    testId,\n    icon,\n\n    overlayMode = \"dialog\",\n    overlay,\n\n    showOverlayOnBlur,\n    showDialogOnBlur,\n    open,\n    onOpenChange,\n\n    onConfirm,\n    onConfirmError,\n    onConfirmFinally,\n\n    onSecondaryConfirm,\n    onSecondaryConfirmError,\n    onSecondaryConfirmFinally,\n\n    labels,\n    confirmLabel = \"Confirm\",\n    pendingLabel = \"Working...\",\n    dialogTitle = \"Feature unavailable\",\n    dialogDescription = \"This feature is currently not accessible. You may need additional permissions or a higher plan.\",\n    errorMessage = \"Something went wrong. Please try again.\",\n    secondaryLabel,\n    secondaryPendingLabel = \"Working...\",\n\n    autoCloseDialogOnConfirm = true,\n    autoUnblurOnConfirm = true,\n    resetErrorOnOpenChange = true,\n\n    announcePending = true,\n    focusErrorOnSet = true,\n    returnFocusTo,\n\n    inlinePosition = \"centerCenter\",\n    inlineContainerClassName,\n    inlinePanelClassName,\n    inlineAriaLabel = \"Upgrade panel\",\n\n    children,\n    onUnblur,\n  },\n  ref,\n) {\n  // Normalize labels with new object while preserving old props\n  const normalizedLabels: Labels = {\n    confirm: labels?.confirm ?? confirmLabel,\n    pending: labels?.pending ?? pendingLabel,\n    title: labels?.title ?? dialogTitle,\n    description: labels?.description ?? dialogDescription,\n    error: labels?.error ?? errorMessage,\n    secondary: labels?.secondary ?? secondaryLabel,\n    secondaryPending: labels?.secondaryPending ?? secondaryPendingLabel,\n  }\n\n  // Internal controlled/uncontrolled open\n  const [internalOpen, setInternalOpen] = React.useState<boolean | undefined>(undefined)\n  const controlled = open !== undefined\n  const shouldAutoOpen = showOverlayOnBlur ?? showDialogOnBlur ?? true\n  const defaultOpen = isBlurred && shouldAutoOpen\n  const effectiveOpen = controlled ? (open as boolean) : (internalOpen ?? defaultOpen)\n\n  // Error state\n  const [error, setError] = React.useState<unknown | null>(null)\n  const resetError = React.useCallback(() => setError(null), [])\n\n  // SR pending live region id\n  const statusId = React.useId()\n\n  // Focus management (restore)\n  const lastActiveRef = React.useRef<HTMLElement | null>(null)\n  const restoreFocus = React.useCallback(() => {\n    if (typeof window === \"undefined\") return\n    if (returnFocusTo) {\n      if (typeof returnFocusTo === \"string\") {\n        const el = document.querySelector(returnFocusTo) as HTMLElement | null\n        el?.focus()\n        return\n      }\n      returnFocusTo.focus?.()\n      return\n    }\n    lastActiveRef.current?.focus?.()\n  }, [returnFocusTo])\n\n  // Sync uncontrolled open with blur state\n  React.useEffect(() => {\n    if (controlled) return\n    if (defaultOpen) setInternalOpen(true)\n    if (!isBlurred) setInternalOpen(false)\n  }, [controlled, defaultOpen, isBlurred])\n\n  // Track open transitions for focus capture/restore\n  const prevOpenRef = React.useRef<boolean>(effectiveOpen)\n  React.useEffect(() => {\n    if (!prevOpenRef.current && effectiveOpen) {\n      // opening now\n      if (typeof document !== \"undefined\") {\n        const active = document.activeElement\n        if (active && active instanceof HTMLElement) lastActiveRef.current = active\n      }\n    } else if (prevOpenRef.current && !effectiveOpen) {\n      // closing now\n      restoreFocus()\n    }\n    prevOpenRef.current = effectiveOpen\n  }, [effectiveOpen, restoreFocus])\n\n  // Reset error on open changes if configured\n  React.useEffect(() => {\n    if (!resetErrorOnOpenChange) return\n    resetError()\n  }, [effectiveOpen, resetErrorOnOpenChange]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleOpenChange = (next: boolean) => {\n    if (!controlled) setInternalOpen(next)\n    onOpenChange?.(next)\n  }\n\n  // Async confirm using useTransition\n  const [isPending, startTransition] = React.useTransition()\n  const [isSecondaryPending, startSecondaryTransition] = React.useTransition()\n  const close = () => handleOpenChange(false)\n\n  // Error focusing refs\n  const internalErrorRef = React.useRef<HTMLDivElement | null>(null)\n  const externalErrorRef = React.useRef<HTMLElement | null>(null)\n  const registerErrorRef = (el: HTMLElement | null) => {\n    externalErrorRef.current = el ?? null\n  }\n  const focusError = () => {\n    const target = externalErrorRef.current ?? internalErrorRef.current\n    if (target) {\n      setTimeout(() => {\n        target.focus({ preventScroll: false })\n      }, 0)\n    }\n  }\n\n  const handleConfirm = () => {\n    resetError()\n    startTransition(async () => {\n      try {\n        await Promise.resolve(onConfirm?.())\n        onConfirmFinally?.(\"success\")\n        if (autoUnblurOnConfirm) onUnblur?.()\n        if (autoCloseDialogOnConfirm) close()\n      } catch (e) {\n        setError(e)\n        onConfirmError?.(e)\n        onConfirmFinally?.(\"error\")\n        if (focusErrorOnSet) focusError()\n      }\n    })\n  }\n\n  const handleSecondaryConfirm = () => {\n    resetError()\n    startSecondaryTransition(async () => {\n      try {\n        await Promise.resolve(onSecondaryConfirm?.())\n        onSecondaryConfirmFinally?.(\"success\")\n        if (autoUnblurOnConfirm) onUnblur?.()\n        if (autoCloseDialogOnConfirm) close()\n      } catch (e) {\n        setError(e)\n        onSecondaryConfirmError?.(e)\n        onSecondaryConfirmFinally?.(\"error\")\n        if (focusErrorOnSet) focusError()\n      }\n    })\n  }\n\n  // Visual styles\n  const filterClass = blurPx == null ? (isBlurred ? intensityToClass[blurIntensity] : \"\") : \"\"\n  const filterStyle: React.CSSProperties = blurPx != null && isBlurred ? { filter: `blur(${blurPx}px)` } : {}\n  const interactionClass = isBlurred && disablePointerEvents ? \"pointer-events-none select-none\" : \"\"\n  const opacityStyle: React.CSSProperties = isBlurred ? { opacity: dimOpacity } : {}\n\n  // Focus blocking with inert\n  const contentRef = React.useRef<HTMLDivElement | null>(null)\n  React.useEffect(() => {\n    const el = contentRef.current\n    if (!el) return\n    if (isBlurred && focusInert) {\n      el.setAttribute(\"inert\", \"\")\n      el.setAttribute(\"aria-hidden\", \"true\")\n    } else {\n      el.removeAttribute(\"inert\")\n      el.removeAttribute(\"aria-hidden\")\n    }\n  }, [isBlurred, focusInert])\n\n  // Pending announcement for SR\n  const PendingStatus = () =>\n    announcePending ? (\n      <div id={statusId} role=\"status\" aria-live=\"polite\" className=\"sr-only\">\n        {isPending ? normalizedLabels.pending : \"\"}\n      </div>\n    ) : null\n\n  const ErrorBox = () => {\n    if (!error) return null\n    return (\n      <div\n        ref={internalErrorRef}\n        role=\"alert\"\n        aria-live=\"assertive\"\n        tabIndex={-1}\n        className=\"mt-2 flex items-start gap-2 rounded-md border border-red-200 bg-red-50 px-3 py-2 text-sm text-red-700 focus:outline-none focus:ring-2 focus:ring-red-300\"\n      >\n        <AlertCircle className=\"mt-0.5 size-4\" aria-hidden={true} />\n        <div>{normalizedLabels.error}</div>\n      </div>\n    )\n  }\n\n  const IconComponent = icon || Lock\n\n  const renderDefaultInline = () => (\n    <div className=\"space-y-3\">\n      <div className=\"flex items-center gap-2\">\n        <IconComponent className=\"size-4 text-neutral-500\" aria-hidden={true} />\n        <p className=\"text-sm font-medium\">{normalizedLabels.title || \"Upgrade required\"}</p>\n      </div>\n      {normalizedLabels.description ? (\n        <p className=\"text-sm text-muted-foreground\">{normalizedLabels.description}</p>\n      ) : null}\n      <ErrorBox />\n      {(onConfirm || onSecondaryConfirm) ? (\n        <div className=\"flex gap-2 justify-end\">\n          {onSecondaryConfirm && normalizedLabels.secondary ? (\n            <Button\n              onClick={handleSecondaryConfirm}\n              disabled={isSecondaryPending || isPending}\n              aria-busy={isSecondaryPending}\n              aria-describedby={announcePending ? statusId : undefined}\n              variant=\"outline\"\n            >\n              {isSecondaryPending ? (\n                <span className=\"inline-flex items-center gap-2\">\n                  <Loader2 className=\"size-4 animate-spin\" aria-hidden={true} />\n                  {normalizedLabels.secondaryPending}\n                </span>\n              ) : (\n                normalizedLabels.secondary\n              )}\n            </Button>\n          ) : null}\n          {onConfirm ? (\n            <Button\n              onClick={handleConfirm}\n              disabled={isPending || isSecondaryPending}\n              aria-busy={isPending}\n              aria-describedby={announcePending ? statusId : undefined}\n              className=\"bg-neutral-900 text-white hover:bg-neutral-800\"\n            >\n              {isPending ? (\n                <span className=\"inline-flex items-center gap-2\">\n                  <Loader2 className=\"size-4 animate-spin\" aria-hidden={true} />\n                  {normalizedLabels.pending}\n                </span>\n              ) : (\n                normalizedLabels.confirm\n              )}\n            </Button>\n          ) : null}\n        </div>\n      ) : null}\n      <PendingStatus />\n    </div>\n  )\n\n  const renderOverlayContent = () => {\n    if (typeof overlay === \"function\") {\n      return overlay({\n        isPending,\n        error,\n        confirm: handleConfirm,\n        close,\n        resetError,\n        registerErrorRef,\n        focusError,\n      })\n    }\n    if (overlay) return overlay\n    return renderDefaultInline()\n  }\n\n  // Keyboard shortcuts for inline overlay (Enter confirm, Escape close)\n  const onInlineKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault()\n      handleConfirm()\n    } else if (e.key === \"Escape\") {\n      e.preventDefault()\n      handleOpenChange(false)\n    }\n  }\n\n  const InlineOverlay = effectiveOpen ? (\n    <div\n      className={cn(\n        \"pointer-events-none absolute inset-0 z-10 flex\",\n        getPositionClasses(inlinePosition),\n        inlineContainerClassName,\n      )}\n      aria-live=\"polite\"\n    >\n      <div\n        className={cn(\n          \"pointer-events-auto rounded-md border bg-background/95 p-4 shadow-sm backdrop-blur supports-[backdrop-filter]:bg-background/60\",\n          \"w-[min(92vw,28rem)]\",\n          inlinePanelClassName,\n        )}\n        role=\"dialog\"\n        aria-label={inlineAriaLabel}\n        aria-modal=\"false\"\n        tabIndex={-1}\n        onKeyDown={onInlineKeyDown}\n      >\n        {renderOverlayContent()}\n      </div>\n    </div>\n  ) : null\n\n  const DialogOverlay = (\n    <Dialog open={effectiveOpen} onOpenChange={handleOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <PendingStatus />\n        {typeof overlay === \"function\" || overlay ? (\n          renderOverlayContent()\n        ) : (\n          <>\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <IconComponent className=\"size-4 text-neutral-500\" aria-hidden={true} />\n                {normalizedLabels.title}\n              </DialogTitle>\n              {normalizedLabels.description ? (\n                <DialogDescription>{normalizedLabels.description}</DialogDescription>\n              ) : null}\n            </DialogHeader>\n            <div className=\"px-1\">\n              <ErrorBox />\n            </div>\n            {(onConfirm || onSecondaryConfirm) ? (\n              <DialogFooter className=\"gap-2 sm:justify-end\">\n                {onSecondaryConfirm && normalizedLabels.secondary ? (\n                  <Button\n                    onClick={handleSecondaryConfirm}\n                    disabled={isSecondaryPending || isPending}\n                    aria-busy={isSecondaryPending}\n                    aria-describedby={announcePending ? statusId : undefined}\n                    variant=\"outline\"\n                  >\n                    {isSecondaryPending ? (\n                      <span className=\"inline-flex items-center gap-2\">\n                        <Loader2 className=\"size-4 animate-spin\" aria-hidden={true} />\n                        {normalizedLabels.secondaryPending}\n                      </span>\n                    ) : (\n                      normalizedLabels.secondary\n                    )}\n                  </Button>\n                ) : null}\n                {onConfirm ? (\n                  <Button\n                    onClick={handleConfirm}\n                    disabled={isPending || isSecondaryPending}\n                    aria-busy={isPending}\n                    aria-describedby={announcePending ? statusId : undefined}\n                    className=\"bg-neutral-900 text-white hover:bg-neutral-800\"\n                  >\n                    {isPending ? (\n                      <span className=\"inline-flex items-center gap-2\">\n                        <Loader2 className=\"size-4 animate-spin\" aria-hidden={true} />\n                        {normalizedLabels.pending}\n                      </span>\n                    ) : (\n                      normalizedLabels.confirm\n                    )}\n                  </Button>\n                ) : null}\n              </DialogFooter>\n            ) : null}\n          </>\n        )}\n      </DialogContent>\n    </Dialog>\n  )\n\n  return (\n    <div\n      ref={ref ? mergeRefs<HTMLDivElement>(ref) : undefined}\n      className={cn(\"relative\", className)}\n      aria-disabled={isBlurred || undefined}\n      data-blurred={isBlurred ? \"true\" : \"false\"}\n      data-pending={isPending ? \"true\" : \"false\"}\n      data-error={error ? \"true\" : \"false\"}\n      data-testid={testId}\n    >\n      <div\n        ref={contentRef}\n        className={cn(\"transition-all duration-200\", filterClass, interactionClass, contentClassName)}\n        style={{ ...filterStyle, ...opacityStyle }}\n      >\n        {children}\n      </div>\n\n      {overlayMode === \"dialog\" ? DialogOverlay : InlineOverlay}\n    </div>\n  )\n})\n\nexport default BlurWrapper\nexport type { Labels }\n"
    }
  ]
}