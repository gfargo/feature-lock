{
  "name": "upgrade-modal",
  "type": "registry:ui",
  "dependencies": [
    "react@^19.0.0",
    "lucide-react@^0.454.0",
    "class-variance-authority@^0.7.1",
    "clsx@^2.1.1",
    "tailwind-merge@^3.3.1",
    "@radix-ui/react-dialog@1.1.4"
  ],
  "registryDependencies": [
    "button",
    "badge"
  ],
  "files": [
    {
      "type": "registry:lib",
      "path": "components/upgradeModal/upgrade-modal.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport { cn } from \"@/lib/utils\"\nimport { AlertCircle, ArrowRight, Check, Loader2, Minus } from \"lucide-react\"\n\ntype PlanFeature =\n  | string\n  | {\n      label: string\n      included?: boolean\n      footnote?: string\n    }\n\nexport type UpgradePlan = {\n  id: string\n  name: string\n  description?: string\n  price?: string\n  period?: string\n  badge?: string | null\n  recommended?: boolean\n  highlight?: string\n  features?: PlanFeature[]\n  footnote?: string\n  ctaLabel?: string\n  ctaHref?: string\n  ctaPendingLabel?: string\n  onSelect?: () => Promise<void> | void\n  onSelectSuccess?: () => void\n  onSelectError?: (error: unknown) => void\n}\n\nexport type UpgradeModalProps = {\n  plans: UpgradePlan[]\n  trigger?: React.ReactNode\n  open?: boolean\n  defaultOpen?: boolean\n  onOpenChange?: (open: boolean) => void\n  onClose?: () => void\n  onPlanSelected?: (planId: string) => void\n  title?: string\n  subtitle?: string\n  description?: string\n  badge?: string | null\n  highlightLabel?: string\n  finePrint?: string\n  supportEmail?: string\n  supportLabel?: string\n  footer?: React.ReactNode\n  autoCloseOnSelect?: boolean\n  resetErrorsOnOpen?: boolean\n  className?: string\n  contentClassName?: string\n  planCardClassName?: string\n  showCloseButton?: boolean\n}\n\nfunction normalizeFeature(feature: PlanFeature, fallbackIncluded = true) {\n  if (typeof feature === \"string\") {\n    return {\n      label: feature,\n      included: fallbackIncluded,\n    }\n  }\n\n  return {\n    label: feature.label,\n    included: feature.included ?? fallbackIncluded,\n    footnote: feature.footnote,\n  }\n}\n\nexport const UpgradeModal = React.forwardRef<HTMLDivElement, UpgradeModalProps>(function UpgradeModal(\n  {\n    plans,\n    trigger,\n    open,\n    defaultOpen,\n    onOpenChange,\n    onClose,\n    onPlanSelected,\n    title = \"Unlock more with Feature Lock\",\n    subtitle,\n    description = \"Choose the plan that fits your team and start shipping premium experiences.\",\n    badge = \"Upgrade\",\n    highlightLabel = \"Everything in Free, plus\",\n    finePrint,\n    supportEmail,\n    supportLabel = \"Need help? Reach out:\",\n    footer,\n    autoCloseOnSelect = true,\n    resetErrorsOnOpen = true,\n    className,\n    contentClassName,\n    planCardClassName,\n    showCloseButton = true,\n  },\n  ref,\n) {\n  const isControlled = open !== undefined\n  const [internalOpen, setInternalOpen] = React.useState(defaultOpen ?? false)\n  const [pendingPlan, setPendingPlan] = React.useState<string | null>(null)\n  const [planErrors, setPlanErrors] = React.useState<Record<string, unknown>>({})\n\n  const currentOpen = isControlled ? open : internalOpen\n\n  const setOpen = React.useCallback(\n    (next: boolean) => {\n      if (!isControlled) {\n        setInternalOpen(next)\n      }\n      onOpenChange?.(next)\n      if (!next) {\n        onClose?.()\n      }\n    },\n    [isControlled, onClose, onOpenChange],\n  )\n\n  React.useEffect(() => {\n    if (currentOpen && resetErrorsOnOpen) {\n      setPlanErrors({})\n      setPendingPlan(null)\n    }\n  }, [currentOpen, resetErrorsOnOpen])\n\n  const handlePlanSelect = React.useCallback(\n    async (plan: UpgradePlan) => {\n      if (!plan.onSelect) {\n        onPlanSelected?.(plan.id)\n        if (autoCloseOnSelect) {\n          setOpen(false)\n        }\n        return\n      }\n\n      setPendingPlan(plan.id)\n      setPlanErrors((prev) => ({ ...prev, [plan.id]: null }))\n\n      try {\n        const result = await plan.onSelect()\n        plan.onSelectSuccess?.()\n        onPlanSelected?.(plan.id)\n        if (autoCloseOnSelect) {\n          setOpen(false)\n        }\n        return result\n      } catch (error) {\n        setPlanErrors((prev) => ({ ...prev, [plan.id]: error }))\n        plan.onSelectError?.(error)\n      } finally {\n        setPendingPlan(null)\n      }\n    },\n    [autoCloseOnSelect, onPlanSelected, setOpen],\n  )\n\n  const gridColumns =\n    plans.length >= 3 ? \"md:grid-cols-3\" : plans.length === 2 ? \"md:grid-cols-2\" : \"md:grid-cols-1\"\n\n  return (\n    <Dialog open={currentOpen} onOpenChange={setOpen}>\n      {trigger ? <DialogTrigger asChild>{trigger}</DialogTrigger> : null}\n      <DialogContent\n        ref={ref}\n        showCloseButton={showCloseButton}\n        className={cn(\n          \"sm:max-w-4xl md:max-w-5xl bg-gradient-to-br from-background via-background to-background\",\n          className,\n        )}\n      >\n        <DialogHeader className=\"space-y-4 text-left\">\n          {badge ? (\n            <Badge variant=\"outline\" className=\"w-fit border-primary/30 text-primary\">\n              {badge}\n            </Badge>\n          ) : null}\n          <div className=\"space-y-2\">\n            <DialogTitle className=\"text-2xl sm:text-3xl font-semibold leading-tight\">{title}</DialogTitle>\n            {subtitle ? <p className=\"text-sm font-medium text-primary\">{subtitle}</p> : null}\n            <DialogDescription className=\"text-left text-base text-muted-foreground\">\n              {description}\n            </DialogDescription>\n          </div>\n        </DialogHeader>\n\n        <div className={cn(\"space-y-6\", contentClassName)}>\n          <div className={cn(\"grid gap-4\", gridColumns)}>\n            {plans.map((plan) => {\n              const pending = pendingPlan === plan.id\n              const error = planErrors[plan.id]\n              const cardClasses = cn(\n                \"relative flex flex-col rounded-2xl border border-primary/15 bg-card/80 p-6 shadow-sm transition-shadow\",\n                plan.recommended\n                  ? \"border-primary/40 bg-gradient-to-b from-primary/10 via-background to-background shadow-lg\"\n                  : \"hover:shadow-md\",\n                planCardClassName,\n              )\n\n              return (\n                <div key={plan.id} className={cardClasses}>\n                  {plan.recommended ? (\n                    <span className=\"absolute right-4 top-4 rounded-full bg-primary px-3 py-1 text-xs font-semibold text-primary-foreground\">\n                      Recommended\n                    </span>\n                  ) : null}\n                  {plan.badge ? (\n                    <Badge variant=\"outline\" className=\"w-fit border-primary/30 text-primary mb-3 uppercase tracking-wide\">\n                      {plan.badge}\n                    </Badge>\n                  ) : null}\n                  <div className=\"space-y-3 pb-4\">\n                    <div className=\"space-y-1\">\n                      <h3 className=\"text-xl font-semibold text-foreground\">{plan.name}</h3>\n                      {plan.description ? <p className=\"text-sm text-muted-foreground\">{plan.description}</p> : null}\n                    </div>\n                    {plan.price ? (\n                      <div className=\"text-3xl font-semibold text-foreground\">\n                        {plan.price}\n                        {plan.period ? (\n                          <span className=\"text-sm font-normal text-muted-foreground\">/{plan.period}</span>\n                        ) : null}\n                      </div>\n                    ) : null}\n                    {plan.highlight ? <p className=\"text-sm text-primary font-medium\">{plan.highlight}</p> : null}\n                  </div>\n\n                  {plan.features?.length ? (\n                    <div className=\"space-y-2 border-t border-primary/10 pt-4\">\n                      <p className=\"text-xs font-semibold uppercase tracking-wide text-muted-foreground\">{highlightLabel}</p>\n                      <ul className=\"space-y-2\">\n                        {plan.features.map((feature, index) => {\n                          const normalized = normalizeFeature(feature)\n                          const included = normalized.included !== false\n                          return (\n                            <li key={`${plan.id}-feature-${index}`} className=\"flex items-start gap-2 text-sm text-muted-foreground\">\n                              <span\n                                className={cn(\n                                  \"mt-0.5 flex size-5 items-center justify-center rounded-full border\",\n                                  included\n                                    ? \"border-primary/40 bg-primary/10 text-primary\"\n                                    : \"border-muted-foreground/20 text-muted-foreground\",\n                                )}\n                                aria-hidden=\"true\"\n                              >\n                                {included ? <Check className=\"size-3\" /> : <Minus className=\"size-3\" />}\n                              </span>\n                              <span>\n                                {normalized.label}\n                                {normalized.footnote ? (\n                                  <span className=\"block text-xs text-muted-foreground/80\">{normalized.footnote}</span>\n                                ) : null}\n                              </span>\n                            </li>\n                          )\n                        })}\n                      </ul>\n                    </div>\n                  ) : null}\n\n                  {plan.footnote ? (\n                    <p className=\"mt-4 text-xs text-muted-foreground/80\">{plan.footnote}</p>\n                  ) : null}\n\n                  {error ? (\n                    <div className=\"mt-4 flex items-start gap-2 rounded-md border border-destructive/30 bg-destructive/10 px-3 py-2 text-xs text-destructive\">\n                      <AlertCircle className=\"mt-0.5 size-4\" aria-hidden=\"true\" />\n                      <span>{error instanceof Error ? error.message : \"Something went wrong. Please try again.\"}</span>\n                    </div>\n                  ) : null}\n\n                  <div className=\"mt-6 flex flex-col gap-2\">\n                    {plan.ctaHref && !plan.onSelect ? (\n                      <Button asChild className=\"w-full\">\n                        <a href={plan.ctaHref} target=\"_blank\" rel=\"noreferrer\">\n                          <span>{plan.ctaLabel ?? \"Upgrade\"}</span>\n                          <ArrowRight className=\"ml-2 size-4\" aria-hidden=\"true\" />\n                        </a>\n                      </Button>\n                    ) : (\n                      <Button\n                        className=\"w-full\"\n                        onClick={() => handlePlanSelect(plan)}\n                        disabled={pending}\n                      >\n                        {pending ? (\n                          <>\n                            <Loader2 className=\"mr-2 size-4 animate-spin\" aria-hidden=\"true\" />\n                            <span>{plan.ctaPendingLabel ?? \"Working...\"}</span>\n                          </>\n                        ) : (\n                          <>\n                            <span>{plan.ctaLabel ?? \"Upgrade\"}</span>\n                            <ArrowRight className=\"ml-2 size-4\" aria-hidden=\"true\" />\n                          </>\n                        )}\n                      </Button>\n                    )}\n\n                    {plan.ctaHref && plan.onSelect ? (\n                      <Button variant=\"outline\" asChild className=\"w-full text-sm\">\n                        <a href={plan.ctaHref} target=\"_blank\" rel=\"noreferrer\">\n                          View plan details\n                        </a>\n                      </Button>\n                    ) : null}\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n\n          {finePrint ? <p className=\"text-xs text-muted-foreground\">{finePrint}</p> : null}\n\n          {supportEmail ? (\n            <div className=\"rounded-lg border border-primary/10 bg-primary/5 p-4 text-sm text-muted-foreground\">\n              <p>{supportLabel}</p>\n              <a\n                href={`mailto:${supportEmail}`}\n                className=\"font-medium text-primary underline-offset-4 hover:underline\"\n              >\n                {supportEmail}\n              </a>\n            </div>\n          ) : null}\n        </div>\n\n        {footer ? <DialogFooter className=\"pt-4\">{footer}</DialogFooter> : null}\n      </DialogContent>\n    </Dialog>\n  )\n})\n\nUpgradeModal.displayName = \"UpgradeModal\"\n\nexport const UpgradeModalTrigger = DialogTrigger\nexport const UpgradeModalClose = DialogClose\n"
    }
  ]
}