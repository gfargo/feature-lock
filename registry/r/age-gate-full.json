{
  "name": "age-gate-full",
  "type": "registry:ui",
  "dependencies": [
    "react@^19.0.0",
    "lucide-react@^0.454.0",
    "class-variance-authority@^0.7.1",
    "clsx@^2.1.1",
    "tailwind-merge@^3.3.1",
    "@radix-ui/react-dialog@1.1.4"
  ],
  "registryDependencies": [
    "button",
    "dialog",
    "input",
    "label"
  ],
  "files": [
    {
      "type": "registry:doc",
      "path": "components/ageGate/README.md",
      "content": "# Age Gate\n\nA configurable age verification dialog component for React applications that need to verify user age before allowing access to age-restricted content.\n\n## Features\n\n- **Multiple verification methods**: Simple confirmation, birthdate entry, or custom verification\n- **Persistent verification**: Remember user's verification choice using localStorage or sessionStorage\n- **Accessible**: Built with proper ARIA attributes, focus management, and screen reader support\n- **Async-ready**: Supports async verification callbacks with loading states\n- **Customizable**: Flexible styling, labels, and verification logic\n- **TypeScript**: Full type safety with comprehensive prop types\n\n## Installation\n\n```bash\nnpx shadcn@latest add https://feature-lock.griffen.codes/r/age-gate\n```\n\n## Usage\n\n### Simple Age Verification\n\n```tsx\nimport AgeGate from \"@/components/ageGate/age-gate\"\n\nfunction App() {\n  const [showAgeGate, setShowAgeGate] = useState(true)\n\n  return (\n    <div>\n      <AgeGate\n        open={showAgeGate}\n        onOpenChange={setShowAgeGate}\n        onVerified={() => console.log(\"User verified as 18+\")}\n        onDenied={() => console.log(\"User denied access\")}\n      />\n      \n      {/* Your age-restricted content */}\n      <div>Age-restricted content here</div>\n    </div>\n  )\n}\n```\n\n### Birthdate Verification\n\n```tsx\n<AgeGate\n  method=\"birthdate\"\n  minimumAge={21}\n  rememberVerification={true}\n  onVerified={(age) => {\n    console.log(`User is ${age} years old`)\n    // Allow access to content\n  }}\n  onDenied={() => {\n    // Redirect to age-appropriate content\n    window.location.href = \"/under-21\"\n  }}\n/>\n```\n\n### Custom Verification\n\n```tsx\n<AgeGate\n  method=\"custom\"\n  customVerification={({ onVerify, isPending, error }) => (\n    <div className=\"space-y-4\">\n      <p>Please verify your identity to continue.</p>\n      {error && <div className=\"text-red-600\">Verification failed</div>}\n      <div className=\"flex gap-2\">\n        <Button \n          onClick={() => onVerify(true)}\n          disabled={isPending}\n        >\n          I'm verified\n        </Button>\n        <Button \n          onClick={() => onVerify(false)}\n          variant=\"outline\"\n          disabled={isPending}\n        >\n          Cancel\n        </Button>\n      </div>\n    </div>\n  )}\n/>\n```\n\n### With Persistence\n\n```tsx\n<AgeGate\n  method=\"birthdate\"\n  rememberVerification={true}\n  storageKey=\"wine-shop-age-verification\"\n  storageType=\"localStorage\" // or \"sessionStorage\" or \"cookie\"\n  onVerified={() => {\n    // User verification will be remembered\n    setCanAccessWineShop(true)\n  }}\n/>\n```\n\n### With Cookie Storage\n\n```tsx\n<AgeGate\n  method=\"simple\"\n  rememberVerification={true}\n  storageKey=\"age-verified\"\n  storageType=\"cookie\"\n  cookieOptions={{\n    maxAge: 60 * 60 * 24 * 30, // 30 days\n    domain: \".example.com\",\n    secure: true,\n    sameSite: \"lax\"\n  }}\n  onVerified={() => {\n    setAgeVerified(true)\n  }}\n/>\n```\n\n### With Custom Content\n\n```tsx\n<AgeGate\n  method=\"birthdate\"\n  minimumAge={21}\n  onVerified={() => setCanPurchaseAlcohol(true)}\n>\n  <div className=\"space-y-3 text-sm text-gray-600\">\n    <p>\n      <strong>Legal Notice:</strong> By proceeding, you confirm that you are of legal drinking age \n      in your jurisdiction and agree to our terms of service.\n    </p>\n    <div className=\"flex flex-wrap gap-4\">\n      <a href=\"/terms\" className=\"text-blue-600 hover:underline\">\n        Terms of Service\n      </a>\n      <a href=\"/privacy\" className=\"text-blue-600 hover:underline\">\n        Privacy Policy\n      </a>\n      <a href=\"/age-verification-policy\" className=\"text-blue-600 hover:underline\">\n        Age Verification Policy\n      </a>\n    </div>\n    <p className=\"text-xs\">\n      This verification is required by federal and state regulations.\n    </p>\n  </div>\n</AgeGate>\n```\n\n## API Reference\n\n### Props\n\n| Prop | Type | Default | Description |\n|------|------|---------|-------------|\n| `open` | `boolean` | `undefined` | Controls dialog visibility (controlled mode) |\n| `onOpenChange` | `(open: boolean) => void` | `undefined` | Called when dialog open state changes |\n| `minimumAge` | `number` | `18` | Minimum age required for verification |\n| `method` | `\"simple\" \\| \"birthdate\" \\| \"custom\"` | `\"simple\"` | Age verification method |\n| `rememberVerification` | `boolean` | `false` | Whether to remember verification in storage |\n| `storageKey` | `string` | `\"age-gate-verified\"` | Key used for storing verification |\n| `storageType` | `\"localStorage\" \\| \"sessionStorage\" \\| \"cookie\"` | `\"localStorage\"` | Storage method for verification |\n| `cookieOptions` | `CookieOptions` | `{}` | Cookie configuration when using cookie storage |\n| `children` | `ReactNode` | `undefined` | Custom content to display in the dialog |\n| `onVerified` | `(age?: number) => Promise<void> \\| void` | `undefined` | Called when age is successfully verified |\n| `onDenied` | `() => Promise<void> \\| void` | `undefined` | Called when age verification is denied |\n| `onError` | `(error: unknown) => void` | `undefined` | Called when verification encounters an error |\n| `customVerification` | `(args: CustomVerificationRenderArgs) => ReactNode` | `undefined` | Custom verification UI renderer |\n| `allowCancel` | `boolean` | `true` | Whether to show cancel/deny buttons |\n| `autoCloseOnVerify` | `boolean` | `true` | Auto-close dialog after successful verification |\n| `labels` | `Partial<AgeGateLabels>` | `{}` | Custom labels for all text content |\n| `icon` | `LucideIcon` | `Shield` | Icon displayed in dialog header |\n\n### Verification Methods\n\n#### Simple Method\n- Shows a simple \"I am 18 or older\" confirmation button\n- Best for basic age gates where exact age isn't needed\n- Fastest user experience\n\n#### Birthdate Method  \n- Requires user to enter their date of birth\n- Calculates exact age and passes it to `onVerified`\n- More secure but requires more user input\n- Validates date format and calculates age accurately\n\n#### Custom Method\n- Provides full control over verification UI and logic\n- Use `customVerification` prop to render your own interface\n- Receive helper functions for state management and callbacks\n\n### Storage Behavior\n\nWhen `rememberVerification` is enabled:\n- Verification status is stored using the specified storage method\n- `storageType=\"localStorage\"` (default): Persists across browser sessions\n- `storageType=\"sessionStorage\"`: Cleared when tab closes\n- `storageType=\"cookie\"`: Stored as HTTP cookie with configurable options\n- Storage key can be customized with `storageKey` prop\n- Stored verification is checked on component mount\n\n#### Cookie Options\n\nWhen using `storageType=\"cookie\"`, you can configure:\n\n```typescript\ntype CookieOptions = {\n  domain?: string        // Cookie domain (e.g., \".example.com\")\n  path?: string         // Cookie path (default: \"/\")\n  secure?: boolean      // Require HTTPS\n  sameSite?: \"strict\" | \"lax\" | \"none\"  // SameSite policy\n  maxAge?: number       // Expiration in seconds\n  expires?: Date        // Explicit expiration date\n}\n```\n\nDefault cookie options:\n- `maxAge`: 1 year (31,536,000 seconds)\n- `path`: \"/\"\n- `sameSite`: \"lax\"\n\n### Custom Content\n\nThe `children` prop allows you to add custom content between the description and verification form:\n\n- **Legal disclaimers**: Required notices and compliance text\n- **Links**: Terms of service, privacy policy, age verification policy\n- **Regulatory information**: State law requirements, authority references\n- **Custom styling**: Branded content or additional context\n\nThe children content is rendered in a bordered section to visually separate it from the form controls.\n\n### Accessibility Features\n\n- Proper ARIA attributes and roles\n- Focus management for error states\n- Screen reader announcements for loading states\n- Keyboard navigation support\n- High contrast error styling\n\n### Error Handling\n\nThe component handles various error scenarios:\n- Invalid date formats in birthdate method\n- Network errors in async callbacks\n- Storage access failures (gracefully degrades)\n- Custom error messages via `labels.error`\n\n## Styling\n\nThe component uses Tailwind CSS classes and can be customized via:\n- `className` prop for container styling\n- `labels` prop for all text content\n- CSS custom properties for theme integration\n- Standard shadcn/ui component styling patterns\n\n## Examples\n\n### E-commerce Wine Shop\n\n```tsx\nfunction WineShop() {\n  const [ageVerified, setAgeVerified] = useState(false)\n  \n  return (\n    <>\n      <AgeGate\n        open={!ageVerified}\n        method=\"birthdate\"\n        minimumAge={21}\n        rememberVerification={true}\n        storageKey=\"wine-shop-verification\"\n        storageType=\"cookie\"\n        cookieOptions={{\n          maxAge: 60 * 60 * 24 * 90, // 90 days\n          secure: true,\n          sameSite: \"lax\"\n        }}\n        labels={{\n          title: \"Age Verification Required\",\n          description: \"You must be 21 or older to purchase alcohol.\",\n          birthdateLabel: \"Enter your date of birth\"\n        }}\n        onVerified={(age) => {\n          console.log(`Customer is ${age} years old`)\n          setAgeVerified(true)\n        }}\n        onDenied={() => {\n          window.location.href = \"/non-alcoholic\"\n        }}\n      >\n        <div className=\"space-y-3 text-sm text-gray-600\">\n          <p>\n            <strong>Legal Notice:</strong> This verification is required by federal law. \n            Your information is not stored and is only used for age verification purposes.\n          </p>\n          <div className=\"flex flex-wrap gap-4\">\n            <a href=\"/terms\" className=\"text-blue-600 hover:underline\">\n              Terms of Service\n            </a>\n            <a href=\"/privacy\" className=\"text-blue-600 hover:underline\">\n              Privacy Policy\n            </a>\n            <a href=\"/responsible-drinking\" className=\"text-blue-600 hover:underline\">\n              Responsible Drinking\n            </a>\n          </div>\n          <p className=\"text-xs\">\n            Required by the Alcohol and Tobacco Tax and Trade Bureau (TTB).\n          </p>\n        </div>\n      </AgeGate>\n      \n      {ageVerified && (\n        <div>\n          <h1>Wine Collection</h1>\n          {/* Wine products */}\n        </div>\n      )}\n    </>\n  )\n}\n```\n\n### Gaming Platform\n\n```tsx\nfunction MatureGameContent() {\n  return (\n    <AgeGate\n      method=\"simple\"\n      minimumAge={17}\n      rememberVerification={true}\n      storageType=\"sessionStorage\" // Reset each session\n      labels={{\n        title: \"Mature Content Warning\",\n        description: \"This game contains mature content suitable for ages 17+\",\n        simpleConfirm: \"I am 17 or older\",\n        simpleCancel: \"Take me back\"\n      }}\n      onVerified={() => {\n        // Load mature game content\n        loadGameContent()\n      }}\n      onDenied={() => {\n        // Redirect to age-appropriate games\n        router.push(\"/teen-games\")\n      }}\n    />\n  )\n}\n```\n\n### Cannabis/CBD Products\n\n```tsx\nfunction CannabisShop() {\n  const [location, setLocation] = useState(null)\n  \n  return (\n    <AgeGate\n      method=\"birthdate\"\n      minimumAge={21}\n      rememberVerification={true}\n      storageKey=\"cannabis-age-verification\"\n      storageType=\"cookie\"\n      cookieOptions={{\n        maxAge: 60 * 60 * 24 * 30, // 30 days\n        secure: true,\n        sameSite: \"strict\"\n      }}\n      labels={{\n        title: \"Age & Location Verification\",\n        description: \"Cannabis products are restricted by age and location.\",\n        birthdateLabel: \"Date of Birth\"\n      }}\n      onVerified={(age) => {\n        // Additional location verification might be needed\n        verifyLocation()\n      }}\n    >\n      <div className=\"space-y-4 text-sm\">\n        <div className=\"bg-yellow-50 border border-yellow-200 rounded-md p-3\">\n          <p className=\"font-medium text-yellow-800\">Important Legal Notice</p>\n          <p className=\"text-yellow-700 mt-1\">\n            Cannabis products have not been evaluated by the FDA. These products are not intended \n            to diagnose, treat, cure, or prevent any disease.\n          </p>\n        </div>\n        \n        <div className=\"space-y-2\">\n          <p><strong>By continuing, you confirm:</strong></p>\n          <ul className=\"list-disc list-inside space-y-1 text-gray-600\">\n            <li>You are 21+ years of age</li>\n            <li>Cannabis is legal in your jurisdiction</li>\n            <li>You will not redistribute these products</li>\n            <li>You understand the health risks</li>\n          </ul>\n        </div>\n        \n        <div className=\"flex flex-wrap gap-3 text-xs\">\n          <a href=\"/state-laws\" className=\"text-blue-600 hover:underline\">\n            State Cannabis Laws\n          </a>\n          <a href=\"/health-safety\" className=\"text-blue-600 hover:underline\">\n            Health & Safety Info\n          </a>\n          <a href=\"/lab-results\" className=\"text-blue-600 hover:underline\">\n            Lab Test Results\n          </a>\n        </div>\n        \n        <p className=\"text-xs text-gray-500\">\n          Regulated by [State Cannabis Control Board]. License #ABC123.\n        </p>\n      </div>\n    </AgeGate>\n  )\n}\n```\n\n## Best Practices\n\n1. **Choose the right method**: Use `simple` for basic gates, `birthdate` when you need exact age\n2. **Remember verification**: Enable `rememberVerification` to avoid annoying repeat verifications\n3. **Handle denial gracefully**: Always provide alternative content or clear next steps\n4. **Customize labels**: Make the language appropriate for your content and audience\n5. **Test accessibility**: Ensure the component works with screen readers and keyboard navigation\n6. **Consider legal requirements**: Age gates may have legal implications depending on your content and jurisdiction\n\n## Legal Considerations\n\nThis component is a UI tool and does not provide legal compliance. Age verification requirements vary by jurisdiction and content type. Consult with legal counsel to ensure your age verification process meets applicable laws and regulations."
    },
    {
      "type": "registry:lib",
      "path": "components/ageGate/age-gate.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\nimport {\n    Dialog,\n    DialogContent,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogTitle,\n} from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { AlertCircle, Loader2, Shield } from \"lucide-react\"\nimport type { LucideIcon } from \"lucide-react\"\n\nexport type AgeVerificationMethod = \"birthdate\" | \"simple\" | \"custom\"\n\nexport type AgeGateLabels = {\n  title: string\n  description: string\n  confirm: string\n  pending: string\n  cancel: string\n  error: string\n  birthdateLabel: string\n  birthdatePlaceholder: string\n  simpleConfirm: string\n  simpleCancel: string\n  rememberChoice: string\n}\n\nexport type CustomVerificationRenderArgs = {\n  isPending: boolean\n  error: unknown | null\n  onVerify: (verified: boolean) => void\n  resetError: () => void\n  registerErrorRef: (el: HTMLElement | null) => void\n  focusError: () => void\n}\n\nexport type StorageType = \"localStorage\" | \"sessionStorage\" | \"cookie\"\n\nexport type CookieOptions = {\n  domain?: string\n  path?: string\n  secure?: boolean\n  sameSite?: \"strict\" | \"lax\" | \"none\"\n  maxAge?: number // in seconds\n  expires?: Date\n}\n\nexport type AgeGateProps = {\n  // Core behavior\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n  minimumAge?: number\n  method?: AgeVerificationMethod\n  \n  // Persistence\n  rememberVerification?: boolean\n  storageKey?: string\n  storageType?: StorageType\n  cookieOptions?: CookieOptions\n  \n  // Callbacks\n  onVerified?: (age?: number) => Promise<void> | void\n  onDenied?: () => Promise<void> | void\n  onError?: (error: unknown) => void\n  \n  // Custom verification\n  customVerification?: (args: CustomVerificationRenderArgs) => React.ReactNode\n  \n  // Custom content\n  children?: React.ReactNode\n  \n  // Styling\n  className?: string\n  icon?: LucideIcon\n  \n  // Labels\n  labels?: Partial<AgeGateLabels>\n  \n  // Behavior\n  allowCancel?: boolean\n  autoCloseOnVerify?: boolean\n  resetErrorOnOpenChange?: boolean\n  focusErrorOnSet?: boolean\n  \n  // A11y\n  announcePending?: boolean\n  \n  // Testing\n  testId?: string\n}\n\nconst defaultLabels: AgeGateLabels = {\n  title: \"Age Verification Required\",\n  description: \"Please verify your age to continue.\",\n  confirm: \"Verify Age\",\n  pending: \"Verifying...\",\n  cancel: \"Cancel\",\n  error: \"Age verification failed. Please check your information and try again.\",\n  birthdateLabel: \"Date of Birth\",\n  birthdatePlaceholder: \"MM/DD/YYYY\",\n  simpleConfirm: \"I am 18 or older\",\n  simpleCancel: \"I am under 18\",\n  rememberChoice: \"Remember my choice\",\n}\n\nfunction calculateAge(birthDate: Date): number {\n  const today = new Date()\n  let age = today.getFullYear() - birthDate.getFullYear()\n  const monthDiff = today.getMonth() - birthDate.getMonth()\n  \n  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n    age--\n  }\n  \n  return age\n}\n\nfunction isValidDate(dateString: string): boolean {\n  const date = new Date(dateString)\n  return date instanceof Date && !isNaN(date.getTime())\n}\n\nfunction getCookie(name: string): string | null {\n  if (typeof document === \"undefined\") return null\n  \n  const value = `; ${document.cookie}`\n  const parts = value.split(`; ${name}=`)\n  if (parts.length === 2) {\n    const cookieValue = parts.pop()?.split(';').shift()\n    return cookieValue || null\n  }\n  return null\n}\n\nfunction setCookie(name: string, value: string, options: CookieOptions = {}): void {\n  if (typeof document === \"undefined\") return\n  \n  let cookieString = `${name}=${value}`\n  \n  if (options.maxAge !== undefined) {\n    cookieString += `; Max-Age=${options.maxAge}`\n  }\n  \n  if (options.expires) {\n    cookieString += `; Expires=${options.expires.toUTCString()}`\n  }\n  \n  if (options.domain) {\n    cookieString += `; Domain=${options.domain}`\n  }\n  \n  if (options.path) {\n    cookieString += `; Path=${options.path}`\n  } else {\n    cookieString += `; Path=/`\n  }\n  \n  if (options.secure) {\n    cookieString += `; Secure`\n  }\n  \n  if (options.sameSite) {\n    cookieString += `; SameSite=${options.sameSite}`\n  }\n  \n  document.cookie = cookieString\n}\n\nfunction getStoredVerification(storageKey: string, storageType: StorageType): boolean | null {\n  if (typeof window === \"undefined\") return null\n  \n  try {\n    if (storageType === \"cookie\") {\n      const cookieValue = getCookie(storageKey)\n      return cookieValue ? JSON.parse(cookieValue) : null\n    }\n    \n    const storage = storageType === \"sessionStorage\" ? sessionStorage : localStorage\n    const stored = storage.getItem(storageKey)\n    return stored ? JSON.parse(stored) : null\n  } catch {\n    return null\n  }\n}\n\nfunction setStoredVerification(\n  storageKey: string, \n  verified: boolean, \n  storageType: StorageType,\n  cookieOptions?: CookieOptions\n): void {\n  if (typeof window === \"undefined\") return\n  \n  try {\n    if (storageType === \"cookie\") {\n      const defaultCookieOptions: CookieOptions = {\n        maxAge: 60 * 60 * 24 * 365, // 1 year\n        path: \"/\",\n        sameSite: \"lax\",\n        ...cookieOptions\n      }\n      setCookie(storageKey, JSON.stringify(verified), defaultCookieOptions)\n      return\n    }\n    \n    const storage = storageType === \"sessionStorage\" ? sessionStorage : localStorage\n    storage.setItem(storageKey, JSON.stringify(verified))\n  } catch {\n    // Silently fail if storage is not available\n  }\n}\n\nconst AgeGate = React.forwardRef<HTMLDivElement, AgeGateProps>(function AgeGate(\n  {\n    open,\n    onOpenChange,\n    minimumAge = 18,\n    method = \"simple\",\n    \n    rememberVerification = false,\n    storageKey = \"age-gate-verified\",\n    storageType = \"localStorage\",\n    cookieOptions,\n    \n    onVerified,\n    onDenied,\n    onError,\n    \n    customVerification,\n    children,\n    \n    className,\n    icon,\n    \n    labels,\n    \n    allowCancel = true,\n    autoCloseOnVerify = true,\n    resetErrorOnOpenChange = true,\n    focusErrorOnSet = true,\n    \n    announcePending = true,\n    \n    testId,\n  },\n  ref,\n) {\n  const normalizedLabels: AgeGateLabels = { ...defaultLabels, ...labels }\n  \n  // Internal state\n  const [internalOpen, setInternalOpen] = React.useState(false)\n  const [birthdate, setBirthdate] = React.useState(\"\")\n  const [rememberChoice, setRememberChoice] = React.useState(false)\n  const [error, setError] = React.useState<unknown | null>(null)\n  \n  // Controlled vs uncontrolled\n  const controlled = open !== undefined\n  const effectiveOpen = controlled ? open : internalOpen\n  \n  // Check stored verification on mount\n  React.useEffect(() => {\n    if (!rememberVerification) return\n    \n    const stored = getStoredVerification(storageKey, storageType)\n    if (stored === true) {\n      // Already verified, don't show dialog\n      if (!controlled) setInternalOpen(false)\n      return\n    }\n    \n    // Not verified or no stored value, show dialog if not controlled\n    if (!controlled && stored === null) {\n      setInternalOpen(true)\n    }\n  }, [rememberVerification, storageKey, storageType, controlled])\n  \n  // Async operations using useTransition\n  const [isPending, startTransition] = React.useTransition()\n  \n  // Error management\n  const resetError = React.useCallback(() => setError(null), [])\n  \n  // Reset error on open changes if configured\n  React.useEffect(() => {\n    if (!resetErrorOnOpenChange) return\n    resetError()\n  }, [effectiveOpen, resetErrorOnOpenChange, resetError])\n  \n  // SR pending live region id\n  const statusId = React.useId()\n  \n  // Error focusing refs\n  const internalErrorRef = React.useRef<HTMLDivElement | null>(null)\n  const externalErrorRef = React.useRef<HTMLElement | null>(null)\n  const registerErrorRef = (el: HTMLElement | null) => {\n    externalErrorRef.current = el ?? null\n  }\n  const focusError = () => {\n    const target = externalErrorRef.current ?? internalErrorRef.current\n    if (target) {\n      setTimeout(() => {\n        target.focus({ preventScroll: false })\n      }, 0)\n    }\n  }\n  \n  const handleOpenChange = (nextOpen: boolean) => {\n    if (!controlled) setInternalOpen(nextOpen)\n    onOpenChange?.(nextOpen)\n  }\n  \n  const handleVerification = (verified: boolean, age?: number) => {\n    resetError()\n    startTransition(() => {\n      Promise.resolve().then(async () => {\n        try {\n          if (verified) {\n            // Store verification if remember is enabled\n            if (rememberVerification && rememberChoice) {\n              setStoredVerification(storageKey, true, storageType, cookieOptions)\n            }\n            \n            await Promise.resolve(onVerified?.(age))\n            \n            if (autoCloseOnVerify) {\n              handleOpenChange(false)\n            }\n          } else {\n            await Promise.resolve(onDenied?.())\n            \n            if (autoCloseOnVerify) {\n              handleOpenChange(false)\n            }\n          }\n        } catch (e) {\n          setError(e)\n          onError?.(e)\n          if (focusErrorOnSet) focusError()\n        }\n      })\n    })\n  }\n  \n  const handleBirthdateVerification = () => {\n    if (!birthdate.trim()) {\n      setError(new Error(\"Please enter your date of birth\"))\n      if (focusErrorOnSet) focusError()\n      return\n    }\n    \n    if (!isValidDate(birthdate)) {\n      setError(new Error(\"Please enter a valid date\"))\n      if (focusErrorOnSet) focusError()\n      return\n    }\n    \n    const birthDate = new Date(birthdate)\n    const age = calculateAge(birthDate)\n    const verified = age >= minimumAge\n    \n    handleVerification(verified, age)\n  }\n  \n  const handleSimpleVerification = (verified: boolean) => {\n    handleVerification(verified)\n  }\n  \n  const IconComponent = icon || Shield\n  \n  // Pending announcement for SR\n  const PendingStatus = () =>\n    announcePending ? (\n      <div id={statusId} role=\"status\" aria-live=\"polite\" className=\"sr-only\">\n        {isPending ? normalizedLabels.pending : \"\"}\n      </div>\n    ) : null\n  \n  const ErrorBox = () => {\n    if (!error) return null\n    const message = error instanceof Error ? error.message : normalizedLabels.error\n    \n    return (\n      <div\n        ref={internalErrorRef}\n        role=\"alert\"\n        aria-live=\"assertive\"\n        tabIndex={-1}\n        className=\"mt-2 flex items-start gap-2 rounded-md border border-red-200 bg-red-50 px-3 py-2 text-sm text-red-700 focus:outline-none focus:ring-2 focus:ring-red-300\"\n      >\n        <AlertCircle className=\"mt-0.5 size-4\" aria-hidden={true} />\n        <div>{message}</div>\n      </div>\n    )\n  }\n  \n  const renderBirthdateMethod = () => (\n    <div className=\"space-y-4\">\n      <div className=\"space-y-2\">\n        <Label htmlFor=\"birthdate\">{normalizedLabels.birthdateLabel}</Label>\n        <Input\n          id=\"birthdate\"\n          type=\"date\"\n          value={birthdate}\n          onChange={(e) => setBirthdate(e.target.value)}\n          placeholder={normalizedLabels.birthdatePlaceholder}\n          disabled={isPending}\n          className=\"w-full\"\n        />\n      </div>\n      \n      {rememberVerification && (\n        <div className=\"flex items-center space-x-2\">\n          <input\n            id=\"remember\"\n            type=\"checkbox\"\n            checked={rememberChoice}\n            onChange={(e) => setRememberChoice(e.target.checked)}\n            disabled={isPending}\n            className=\"rounded border-gray-300\"\n          />\n          <Label htmlFor=\"remember\" className=\"text-sm\">\n            {normalizedLabels.rememberChoice}\n          </Label>\n        </div>\n      )}\n      \n      <ErrorBox />\n    </div>\n  )\n  \n  const renderSimpleMethod = () => (\n    <div className=\"space-y-4\">\n      {rememberVerification && (\n        <div className=\"flex items-center space-x-2\">\n          <input\n            id=\"remember\"\n            type=\"checkbox\"\n            checked={rememberChoice}\n            onChange={(e) => setRememberChoice(e.target.checked)}\n            disabled={isPending}\n            className=\"rounded border-gray-300\"\n          />\n          <Label htmlFor=\"remember\" className=\"text-sm\">\n            {normalizedLabels.rememberChoice}\n          </Label>\n        </div>\n      )}\n      \n      <ErrorBox />\n    </div>\n  )\n  \n  const renderCustomMethod = () => {\n    if (!customVerification) return null\n    \n    return customVerification({\n      isPending,\n      error,\n      onVerify: handleVerification,\n      resetError,\n      registerErrorRef,\n      focusError,\n    })\n  }\n  \n  const renderFooter = () => {\n    if (method === \"custom\") return null\n    \n    if (method === \"simple\") {\n      return (\n        <DialogFooter className=\"gap-2 sm:justify-center\">\n          {allowCancel && (\n            <Button\n              onClick={() => handleSimpleVerification(false)}\n              disabled={isPending}\n              variant=\"outline\"\n              aria-describedby={announcePending ? statusId : undefined}\n            >\n              {normalizedLabels.simpleCancel}\n            </Button>\n          )}\n          <Button\n            onClick={() => handleSimpleVerification(true)}\n            disabled={isPending}\n            aria-busy={isPending}\n            aria-describedby={announcePending ? statusId : undefined}\n            className=\"bg-neutral-900 text-white hover:bg-neutral-800\"\n          >\n            {isPending ? (\n              <span className=\"inline-flex items-center gap-2\">\n                <Loader2 className=\"size-4 animate-spin\" aria-hidden={true} />\n                {normalizedLabels.pending}\n              </span>\n            ) : (\n              normalizedLabels.simpleConfirm\n            )}\n          </Button>\n        </DialogFooter>\n      )\n    }\n    \n    if (method === \"birthdate\") {\n      return (\n        <DialogFooter className=\"gap-2 sm:justify-end\">\n          {allowCancel && (\n            <Button\n              onClick={() => handleOpenChange(false)}\n              disabled={isPending}\n              variant=\"outline\"\n            >\n              {normalizedLabels.cancel}\n            </Button>\n          )}\n          <Button\n            onClick={handleBirthdateVerification}\n            disabled={isPending}\n            aria-busy={isPending}\n            aria-describedby={announcePending ? statusId : undefined}\n            className=\"bg-neutral-900 text-white hover:bg-neutral-800\"\n          >\n            {isPending ? (\n              <span className=\"inline-flex items-center gap-2\">\n                <Loader2 className=\"size-4 animate-spin\" aria-hidden={true} />\n                {normalizedLabels.pending}\n              </span>\n            ) : (\n              normalizedLabels.confirm\n            )}\n          </Button>\n        </DialogFooter>\n      )\n    }\n    \n    return null\n  }\n  \n  return (\n    <div\n      ref={ref}\n      className={cn(\"\", className)}\n      data-testid={testId}\n    >\n      <Dialog open={effectiveOpen} onOpenChange={handleOpenChange}>\n        <DialogContent className=\"sm:max-w-md\">\n          <PendingStatus />\n          \n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <IconComponent className=\"size-4 text-neutral-500\" aria-hidden={true} />\n              {normalizedLabels.title}\n            </DialogTitle>\n            <DialogDescription>\n              {normalizedLabels.description}\n            </DialogDescription>\n          </DialogHeader>\n          \n          {children && (\n            <div className=\"px-1 py-2 border-t border-b border-gray-100\">\n              {children}\n            </div>\n          )}\n          \n          <div className=\"px-1\">\n            {method === \"birthdate\" && renderBirthdateMethod()}\n            {method === \"simple\" && renderSimpleMethod()}\n            {method === \"custom\" && renderCustomMethod()}\n          </div>\n          \n          {renderFooter()}\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n})\n\nexport default AgeGate"
    }
  ]
}